start : [(struct_decl|function_decl|using|attribute)*]
?statement : conditional_block
           | for_loop
           | while_loop
           | loop_loop
           | function_call
           | expression ";"
           | variable_decl ";"
           | using ";"
           | continue_rule
           | break_rule
           | return_rule
           | attribute


// Control flow structures
conditional_block : "if" "(" expression ")" "{" [statement*] "}"
                  | "if" "(" expression ")" "{" [statement*] "}" "else" "{" [statement*] "}"
for_loop : "for" "(" variable_decl ";" expression ";" expression ")" "{" [statement*] "}"
while_loop : "while" "(" expression ")" "{" [statement*] "}"
loop_loop : "loop" "{" [statement*] "}"
continue_rule : "continue" ";"
break_rule : "break" ";"
return_rule : "return" ";"
            | "return" expression ";"

// Shorthand structures
shorthand_if : "if" expression "?" expression ":" expression

// Variables
variable_decl : "var" IDENTIFIER "=" expression
variable_assignment : IDENTIFIER "=" expression

// Math shortcuts
?variable_arithmetic : variable_increment
                     | variable_decrement
                     | variable_multiplication
                     | variable_division
variable_increment : IDENTIFIER "++"
                   | IDENTIFIER "+=" expression
variable_decrement : IDENTIFIER "--"
                   | IDENTIFIER "-=" expression
variable_multiplication : IDENTIFIER "*=" expression
variable_division : IDENTIFIER "/=" expression

// Structs
struct_decl : ACCESS_MODIFIER? "struct" IDENTIFIER "{" [(function_decl|struct_property_declaration ";")*] "}"
struct_property_declaration : IDENTIFIER IDENTIFIER ["=" expression]

// Functions
function_call : IDENTIFIER "(" [expression ("," expression)*] ")"
               | IDENTIFIER ("." IDENTIFIER)* "(" [expression ("," expression)*] ")"
               | "new" IDENTIFIER "(" ")"
function_decl : ACCESS_MODIFIER? IDENTIFIER IDENTIFIER "(" [PARAMS? IDENTIFIER IDENTIFIER ("," IDENTIFIER IDENTIFIER | "," PARAMS IDENTIFIER IDENTIFIER)*] ")" "{" [statement*] "}"
               | EXTERNAL IDENTIFIER IDENTIFIER "(" [PARAMS? IDENTIFIER IDENTIFIER ("," IDENTIFIER IDENTIFIER | "," PARAMS IDENTIFIER IDENTIFIER)*] ")" ";"

// Attributes
attribute : "[" function_call "]"

// Base expression
?expression : expression PLUS expression -> addition
            | expression MINUS expression -> subtraction
            | expression MUL expression -> multiplication
            | expression DIV expression -> division
            | expression SMALLER expression -> smaller_than
            | expression BIGGER expression -> bigger_than
            | expression BIGGER_EQUAL expression -> bigger_equal
            | expression SMALLER_EQUAL expression -> smaller_equal
            | function_call
            | STRING -> string
            | "true" -> true
            | "false" -> false
            | "null" -> null
            | NUMBER -> number
            | IDENTIFIER -> var
            | variable_assignment
            | variable_arithmetic
            | shorthand_if
            | "(" expression ")"



using : "use" IDENTIFIER (":" IDENTIFIER)* ";"
ACCESS_MODIFIER.2 : "private" | "public" | "internal"

DIV.-2 : "/"
MUL.-2 : "*"
MINUS.-3 : "-"
PLUS.-3 : "+"
BIGGER.-4 : ">"
SMALLER.-4 : "<"
BIGGER_EQUAL.-4 : ">="
SMALLER_EQUAL.-4 : "<="

NUMBER.-1 : (INT|HEX_INT)
HEX_INT : "0x" HEXDIGIT (HEXDIGIT|"_")*
INT : DIGIT (DIGIT|"_")*
EXTERNAL : "external"
PARAMS: "params"
PREPRO_FLAG : "#"

// Taken from common definition, copied to assign -10 priority
IDENTIFIER.-10 : PREPRO_FLAG? ("_"|LETTER) ("_"|LETTER|DIGIT)*

COMMENT : "//" /[^\n]*/ "\n"
ML_COMMENT : "/*" /[^*]*/ "*/"

%import common.ESCAPED_STRING -> STRING
%import common.LETTER
%import common.DIGIT
%import common.HEXDIGIT
%import common.WS
%ignore WS
%ignore COMMENT
%ignore ML_COMMENT