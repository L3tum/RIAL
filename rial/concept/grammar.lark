?start : [(unsafe_top_level_block|struct_decl|global_variable_decl|global_variable_assignment|attributed_func_decl|function_decl|imported)+]
?statement : conditional_block
           | conditional_elif_block
           | switch_block
           | for_loop
           | while_loop
           | loop_loop
           | unsafe_block
           | function_call
           | expression ";"
           | variable_decl ";"
           | continue_rule
           | break_rule
           | return_rule
           | attribute


// Control flow structures
// Transformed into list of [ expression, likely_unlikely_modifier, conditional_body, conditional_else_block? ]
conditional_block : "if" "(" expression ")" likely_unlikely_modifier "{" conditional_body "}" conditional_elif_block* conditional_else_block?
conditional_body : statement*
conditional_elif_block : "elif" "(" expression ")" likely_unlikely_modifier "{" conditional_body "}"
conditional_else_block : "else" likely_unlikely_modifier "{" conditional_body "}"
likely_unlikely_modifier : ["#[" (LIKELY|UNLIKELY) "]"]
LIKELY : "likely"
UNLIKELY : "unlikely"

switch_block : "switch" "(" expression ")" "{" (switch_case|default_case)+ "}"
switch_case : "case" expression ":" ("{" [statement*] "}")?
default_case : "default" ":" ("{" [statement*] "}")?
for_loop : "for" "(" variable_decl ";" expression ";" expression ")" "{" [statement*] "}"
while_loop : "while" "(" expression ")" "{" [statement*] "}"
loop_loop : "loop" "{" [statement*] "}"
continue_rule : "continue" ";"
break_rule : "break" ";"
return_rule : "return" ";"
            | "return" expression ";"

// Shorthand structures
shorthand_if : "if" expression "?" expression ":" expression

// Variables
global_variable_decl : modifier variable_decl ";"
global_variable_assignment : variable_assignment ";"
variable_decl : "var" IDENTIFIER ASSIGN expression
variable_assignment : var ASSIGN expression

// Structs
struct_decl : modifier "struct" IDENTIFIER [":" chained_identifier ("," chained_identifier)*] "{" struct_body "}"
struct_body : (attributed_func_decl|function_decl|struct_property_declaration ";")*
struct_property_declaration : modifier chained_identifier IDENTIFIER ["=" expression]

// Functions
?function_call : chained_identifier "(" function_args ")"
               | "new" chained_identifier "(" function_args ")"
function_args : [expression ("," expression)*]

?function_decl : modifier chained_identifier IDENTIFIER "(" function_decl_args ")" "{" [statement*] "}"
              | external_function_decl
              | extension_function_decl
extension_function_decl : modifier chained_identifier IDENTIFIER "(" "this" chained_identifier IDENTIFIER ("," function_decl_args)? ")" "{" [statement*] "}"
external_function_decl : ("external" modifier|modifier "external") chained_identifier IDENTIFIER "(" function_decl_args ")" ";"
function_decl_args : [chained_identifier IDENTIFIER ("," chained_identifier IDENTIFIER | "," PARAMS chained_identifier IDENTIFIER)*]

// Modifiers
modifier : (ACCESS_MODIFIER|UNSAFE|STATIC)*

// Attributes
?attribute : "[" function_call "]"
           | "#[" /[^\]]+/ "]" -> builtin_attribute
attributed_func_decl : attribute+ function_decl

// Unsafe
unsafe_block : UNSAFE "{" statement* "}"
unsafe_top_level_block : UNSAFE "{" (attributed_func_decl|function_decl|global_variable_decl|global_variable_assignment)* "}"

// Builtins
sizeof : "@sizeof" "(" expression ")"
llvm_ir : "@llvm_ir" "(" STRING ("," var? ("," STRING?)?)? ")"

// Arrays
?array : array_assignment
       | array_access
array_assignment : array_access ASSIGN expression
array_access : var "[" (number|var) "]"
             | "new" var "[" (number|var) "]"

// Base expression
?expression : sizeof
            | llvm_ir
            | array
            | function_call
            | not_rule
            | expression (SMALLER|BIGGER|BIGGER_EQUAL|SMALLER_EQUAL|EQUAL) expression -> equal
            | math
            | STRING -> string
            | CHAR -> char
            | "true" -> true
            | "false" -> false
            | "null" -> null
            | number
            | var
            | variable_assignment
            | variable_arithmetic
            | shorthand_if
            | "(" expression ")"
            | "(" chained_identifier ")" expression -> cast

var : chained_identifier
math : expression (PLUS|MINUS|MUL|DIV|REM) expression
not_rule : ("!"|"not") expression
number: NUMBER
CHAR : "'" _STRING_ESC_INNER "'"

// Variable modifiers
!variable_mutability : "mut" | "const" | "ref"

// Math shortcuts
// Transformed by DesugarTransformer
variable_arithmetic : expression PLUS~2
                    | expression PLUS ASSIGN expression
                    | expression MINUS~2
                    | expression MINUS ASSIGN expression
                    | expression MUL ASSIGN expression
                    | expression DIV ASSIGN expression
                    | expression REM ASSIGN expression


imported : variable_mutability IDENTIFIER ASSIGN "use" IDENTIFIER (":" IDENTIFIER)* ";"
ACCESS_MODIFIER.2 : "private" | "public" | "internal"
UNSAFE.2 : "unsafe"
STATIC.2 : "static"

REM.-8 : "%"
DIV.-8 : "/"
MUL.-8 : "*"
MINUS.-7 : "-"
PLUS.-7 : "+"
BIGGER_EQUAL.-6 : ">="
SMALLER_EQUAL.-6 : "<="
BIGGER.-5 : ">"
SMALLER.-5 : "<"
EQUAL.-4 : "=="
ASSIGN.-8 : "="

NUMBER.-3 : (PLUS|MINUS)? (HEX_INT|BIN_INT|FLOAT_SC|FLOAT|INT) ("uL"|"Ul"|"UL"|"ul"|"l"|"u"|"U"|"L"|"b"|"B")?
FLOAT_SC.-1 : (FLOAT|INT) "e" ("-"|"+")? INT
FLOAT.-2 : (INT+ "." INT+|INT+ "."|"." INT+) ("f"|"d"|"h")?
BIN_INT : "0b" ("0"|"1"|"_")+
HEX_INT : "0x" HEXDIGIT (HEXDIGIT|"_")*
INT : DIGIT (DIGIT|"_")*
PARAMS: "params"
THIS : "this"
PREPRO_FLAG : "#"
DOT : "."
DOUBLE_COLON : "::"

chained_identifier : IDENTIFIER (DOT IDENTIFIER | DOUBLE_COLON IDENTIFIER)*
PREPRO_IDENTIFIER : PREPRO_FLAG /[a-zA-Z0-9_]*/
IDENTIFIER.-10 : /(_|[a-zA-Z])[a-zA-Z0-9_]*/ ("[" "]")?
           | LITERAL_IDENTIFIER
           | PREPRO_IDENTIFIER
LITERAL_IDENTIFIER : "@\"" /[^"]+/ "\""

COMMENT : "//" /[^\n]*/ "\n"
ML_COMMENT : "/*" /[^*]*/ "*/"

%import common.ESCAPED_STRING -> STRING
%import common.LETTER
%import common.DIGIT
%import common.HEXDIGIT
%import common.WS
%import common._STRING_ESC_INNER
%ignore WS
%ignore COMMENT
%ignore ML_COMMENT