# The file was automatically generated by Lark v0.8.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp(), g_regex_flags)
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    cache_grammar - Cache the Lark grammar (Default: False)
    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        d = pickle.load(f)
        namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
        memo = d['memo']
        return Lark.deserialize(d['data'], namespace, memo)


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'EXTERNAL', 1: 'UNSAFE', 2: 'ACCESS_MODIFIER', 3: 'IDENTIFIER', 4: 'LSQB', 5: 'RBRACE', 6: 'PREPRO_FLAG', 7: 'USE', 8: 'VAR', 9: '$END', 10: 'STRUCT', 11: 'SEMICOLON', 12: 'NUMBER', 13: 'constructor_call', 14: 'LPAR', 15: 'RETURN', 16: 'function_call', 17: 'number', 18: 'shorthand_if', 19: 'NULL', 20: 'unsafe_block', 21: 'continue_rule', 22: 'expression', 23: 'statement', 24: 'variable_assignment', 25: 'return_rule', 26: 'using', 27: 'math', 28: 'WHILE', 29: 'IF', 30: 'STRING', 31: 'array_constructor', 32: 'var', 33: 'for_loop', 34: 'ELIF', 35: 'array_access', 36: '__conditional_body_star_2', 37: 'array', 38: 'array_assignment', 39: 'conditional_elif_block', 40: 'LOOP', 41: 'sizeof', 42: 'SWITCH', 43: 'conditional_block', 44: 'BREAK', 45: 'nested_function_call', 46: 'variable_decl', 47: 'NEW', 48: 'SIZEOF', 49: 'FOR', 50: 'attribute', 51: 'loop_loop', 52: 'variable_arithmetic', 53: 'switch_block', 54: 'FALSE', 55: 'CONTINUE', 56: 'break_rule', 57: 'while_loop', 58: 'TRUE', 59: 'PLUS', 60: 'MUL', 61: 'BIGGER', 62: 'SMALLER_EQUAL', 63: 'MINUS', 64: 'SMALLER', 65: 'DIV', 66: 'EQUAL', 67: 'BIGGER_EQUAL', 68: 'RPAR', 69: 'function_args', 70: 'COLON', 71: 'COMMA', 72: 'DEFAULT', 73: 'CASE', 74: '__function_args_star_7', 75: 'ASSIGN', 76: 'DOT', 77: 'QMARK', 78: 'RSQB', 79: 'default_case', 80: '__switch_block_plus_3', 81: 'switch_case', 82: 'external_function_decl', 83: '__struct_decl_star_5', 84: 'modifier', 85: '__modifier_star_10', 86: '__attributed_func_decl_plus_11', 87: 'attributed_func_decl', 88: 'function_decl', 89: 'extension_function_decl', 90: 'struct_property_declaration', 91: 'LBRACE', 92: '__nested_function_call_plus_6', 93: '__function_decl_star_8', 94: 'PARAMS', 95: '__start_star_0', 96: 'attributed_compiler_directive', 97: 'global_variable_decl', 98: 'start', 99: 'global_variable_assignment', 100: 'struct_decl', 101: 'unsafe_top_level_block', 102: '__using_star_13', 103: 'ELSE', 104: '__external_function_decl_star_9', 105: 'LIKELY', 106: 'UNLIKELY', 107: 'likely_unlikely_modifier', 108: 'conditional_body', 109: 'conditional_else_block', 110: '__conditional_block_star_1', 111: '__unsafe_top_level_block_star_12', 112: 'THIS', 113: '__struct_decl_star_4'}, 'states': {0: {0: (1, {'@': 55}), 1: (1, {'@': 55}), 2: (1, {'@': 55}), 3: (1, {'@': 55}), 4: (1, {'@': 55}), 5: (1, {'@': 55}), 6: (1, {'@': 55}), 7: (1, {'@': 55}), 8: (1, {'@': 55}), 9: (1, {'@': 55}), 10: (1, {'@': 55})}, 1: {11: (0, 41)}, 2: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 141), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 5: (0, 174), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 3: {49: (1, {'@': 56}), 28: (1, {'@': 56}), 15: (1, {'@': 56}), 7: (1, {'@': 56}), 8: (1, {'@': 56}), 5: (1, {'@': 56}), 42: (1, {'@': 56}), 30: (1, {'@': 56}), 40: (1, {'@': 56}), 34: (1, {'@': 56}), 55: (1, {'@': 56}), 14: (1, {'@': 56}), 47: (1, {'@': 56}), 1: (1, {'@': 56}), 29: (1, {'@': 56}), 48: (1, {'@': 56}), 19: (1, {'@': 56}), 58: (1, {'@': 56}), 54: (1, {'@': 56}), 12: (1, {'@': 56}), 3: (1, {'@': 56}), 4: (1, {'@': 56}), 44: (1, {'@': 56})}, 4: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 57})}, 5: {68: (0, 387)}, 6: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 32), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 69: (0, 94), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328), 68: (1, {'@': 58})}, 7: {0: (1, {'@': 59}), 1: (1, {'@': 59}), 2: (1, {'@': 59}), 3: (1, {'@': 59}), 4: (1, {'@': 59}), 5: (1, {'@': 59}), 6: (1, {'@': 59}), 7: (1, {'@': 59}), 8: (1, {'@': 59}), 9: (1, {'@': 59}), 10: (1, {'@': 59})}, 8: {49: (1, {'@': 60}), 8: (1, {'@': 60}), 30: (1, {'@': 60}), 34: (1, {'@': 60}), 55: (1, {'@': 60}), 14: (1, {'@': 60}), 47: (1, {'@': 60}), 29: (1, {'@': 60}), 19: (1, {'@': 60}), 58: (1, {'@': 60}), 54: (1, {'@': 60}), 3: (1, {'@': 60}), 4: (1, {'@': 60}), 28: (1, {'@': 60}), 7: (1, {'@': 60}), 5: (1, {'@': 60}), 42: (1, {'@': 60}), 40: (1, {'@': 60}), 1: (1, {'@': 60}), 48: (1, {'@': 60}), 12: (1, {'@': 60}), 15: (1, {'@': 60}), 44: (1, {'@': 60})}, 9: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 5: (0, 267), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 10: {0: (1, {'@': 61}), 1: (1, {'@': 61}), 8: (1, {'@': 61}), 5: (1, {'@': 61}), 2: (1, {'@': 61}), 3: (1, {'@': 61}), 4: (1, {'@': 61})}, 11: {0: (1, {'@': 62}), 1: (1, {'@': 62}), 6: (1, {'@': 62}), 7: (1, {'@': 62}), 8: (1, {'@': 62}), 9: (1, {'@': 62}), 2: (1, {'@': 62}), 3: (1, {'@': 62}), 4: (1, {'@': 62}), 10: (1, {'@': 62})}, 12: {59: (0, 70), 60: (0, 68), 61: (0, 73), 68: (0, 150), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 13: {11: (1, {'@': 63}), 70: (1, {'@': 63})}, 14: {49: (1, {'@': 64}), 28: (1, {'@': 64}), 15: (1, {'@': 64}), 7: (1, {'@': 64}), 8: (1, {'@': 64}), 5: (1, {'@': 64}), 42: (1, {'@': 64}), 30: (1, {'@': 64}), 40: (1, {'@': 64}), 34: (1, {'@': 64}), 55: (1, {'@': 64}), 14: (1, {'@': 64}), 47: (1, {'@': 64}), 1: (1, {'@': 64}), 29: (1, {'@': 64}), 48: (1, {'@': 64}), 19: (1, {'@': 64}), 58: (1, {'@': 64}), 54: (1, {'@': 64}), 12: (1, {'@': 64}), 3: (1, {'@': 64}), 4: (1, {'@': 64}), 44: (1, {'@': 64})}, 15: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 5: (0, 125), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 16: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 32), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 69: (0, 104), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328), 68: (1, {'@': 58})}, 17: {49: (1, {'@': 65}), 28: (1, {'@': 65}), 15: (1, {'@': 65}), 7: (1, {'@': 65}), 8: (1, {'@': 65}), 5: (1, {'@': 65}), 42: (1, {'@': 65}), 30: (1, {'@': 65}), 40: (1, {'@': 65}), 34: (1, {'@': 65}), 55: (1, {'@': 65}), 14: (1, {'@': 65}), 47: (1, {'@': 65}), 1: (1, {'@': 65}), 29: (1, {'@': 65}), 48: (1, {'@': 65}), 19: (1, {'@': 65}), 58: (1, {'@': 65}), 54: (1, {'@': 65}), 12: (1, {'@': 65}), 3: (1, {'@': 65}), 4: (1, {'@': 65}), 44: (1, {'@': 65})}, 18: {59: (0, 70), 68: (0, 273), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 19: {14: (0, 97)}, 20: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 5: (0, 132), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 21: {68: (1, {'@': 66}), 71: (1, {'@': 66})}, 22: {65: (1, {'@': 67}), 60: (1, {'@': 67}), 63: (1, {'@': 67}), 11: (1, {'@': 67}), 61: (1, {'@': 67}), 59: (1, {'@': 67}), 66: (1, {'@': 67}), 62: (1, {'@': 67}), 64: (1, {'@': 67}), 67: (1, {'@': 67}), 49: (1, {'@': 68}), 28: (1, {'@': 68}), 15: (1, {'@': 68}), 7: (1, {'@': 68}), 8: (1, {'@': 68}), 5: (1, {'@': 68}), 42: (1, {'@': 68}), 30: (1, {'@': 68}), 40: (1, {'@': 68}), 34: (1, {'@': 68}), 55: (1, {'@': 68}), 14: (1, {'@': 68}), 47: (1, {'@': 68}), 1: (1, {'@': 68}), 29: (1, {'@': 68}), 48: (1, {'@': 68}), 19: (1, {'@': 68}), 58: (1, {'@': 68}), 54: (1, {'@': 68}), 12: (1, {'@': 68}), 3: (1, {'@': 68}), 4: (1, {'@': 68}), 44: (1, {'@': 68})}, 23: {0: (1, {'@': 69}), 1: (1, {'@': 69}), 8: (1, {'@': 69}), 5: (1, {'@': 69}), 2: (1, {'@': 69}), 3: (1, {'@': 69}), 4: (1, {'@': 69})}, 24: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 52), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 5: (0, 31), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 25: {0: (1, {'@': 70}), 1: (1, {'@': 70}), 8: (1, {'@': 70}), 5: (1, {'@': 70}), 2: (1, {'@': 70}), 3: (1, {'@': 70}), 4: (1, {'@': 70})}, 26: {72: (1, {'@': 71}), 5: (1, {'@': 71}), 73: (1, {'@': 71})}, 27: {0: (1, {'@': 72}), 1: (1, {'@': 72}), 2: (1, {'@': 72}), 3: (1, {'@': 72}), 4: (1, {'@': 72}), 5: (1, {'@': 72}), 6: (1, {'@': 72}), 7: (1, {'@': 72}), 8: (1, {'@': 72}), 9: (1, {'@': 72}), 10: (1, {'@': 72})}, 28: {12: (0, 367), 5: (0, 400), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 29: {11: (1, {'@': 73}), 0: (1, {'@': 73}), 1: (1, {'@': 73}), 6: (1, {'@': 73}), 7: (1, {'@': 73}), 8: (1, {'@': 73}), 9: (1, {'@': 73}), 2: (1, {'@': 73}), 3: (1, {'@': 73}), 4: (1, {'@': 73}), 10: (1, {'@': 73})}, 30: {3: (0, 165)}, 31: {0: (1, {'@': 74}), 1: (1, {'@': 74}), 2: (1, {'@': 74}), 3: (1, {'@': 74}), 4: (1, {'@': 74}), 5: (1, {'@': 74}), 6: (1, {'@': 74}), 7: (1, {'@': 74}), 8: (1, {'@': 74}), 9: (1, {'@': 74}), 10: (1, {'@': 74})}, 32: {59: (0, 70), 74: (0, 111), 60: (0, 68), 61: (0, 73), 71: (0, 109), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 68: (1, {'@': 75})}, 33: {49: (1, {'@': 76}), 28: (1, {'@': 76}), 15: (1, {'@': 76}), 7: (1, {'@': 76}), 8: (1, {'@': 76}), 5: (1, {'@': 76}), 42: (1, {'@': 76}), 30: (1, {'@': 76}), 40: (1, {'@': 76}), 34: (1, {'@': 76}), 55: (1, {'@': 76}), 14: (1, {'@': 76}), 47: (1, {'@': 76}), 1: (1, {'@': 76}), 29: (1, {'@': 76}), 48: (1, {'@': 76}), 19: (1, {'@': 76}), 58: (1, {'@': 76}), 54: (1, {'@': 76}), 12: (1, {'@': 76}), 3: (1, {'@': 76}), 4: (1, {'@': 76}), 44: (1, {'@': 76})}, 34: {75: (0, 113)}, 35: {68: (1, {'@': 77}), 71: (1, {'@': 77})}, 36: {76: (0, 172), 14: (0, 6), 65: (1, {'@': 78}), 63: (1, {'@': 78}), 60: (1, {'@': 78}), 11: (1, {'@': 78}), 61: (1, {'@': 78}), 59: (1, {'@': 78}), 66: (1, {'@': 78}), 62: (1, {'@': 78}), 75: (1, {'@': 78}), 64: (1, {'@': 78}), 4: (1, {'@': 78}), 67: (1, {'@': 78}), 68: (1, {'@': 78}), 71: (1, {'@': 78}), 70: (1, {'@': 78}), 77: (1, {'@': 78})}, 37: {59: (0, 70), 60: (0, 68), 61: (0, 73), 68: (0, 201), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 38: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 159), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 5: (0, 156), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 39: {0: (1, {'@': 79}), 1: (1, {'@': 79}), 2: (1, {'@': 79}), 3: (1, {'@': 79}), 4: (1, {'@': 79}), 5: (1, {'@': 79}), 6: (1, {'@': 79}), 7: (1, {'@': 79}), 8: (1, {'@': 79}), 9: (1, {'@': 79}), 10: (1, {'@': 79})}, 40: {3: (0, 219)}, 41: {0: (1, {'@': 80}), 1: (1, {'@': 80}), 2: (1, {'@': 80}), 3: (1, {'@': 80}), 4: (1, {'@': 80}), 5: (1, {'@': 80}), 6: (1, {'@': 80}), 7: (1, {'@': 80}), 8: (1, {'@': 80}), 9: (1, {'@': 80}), 10: (1, {'@': 80})}, 42: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 5: (0, 3), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 43: {59: (0, 149), 75: (0, 180)}, 44: {0: (1, {'@': 81}), 1: (1, {'@': 81}), 8: (1, {'@': 81}), 5: (1, {'@': 81}), 2: (1, {'@': 81}), 3: (1, {'@': 81}), 4: (1, {'@': 81})}, 45: {5: (0, 8)}, 46: {59: (0, 70), 68: (0, 179), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 47: {63: (0, 184), 75: (0, 200)}, 48: {78: (0, 335)}, 49: {12: (0, 367), 3: (0, 192), 17: (0, 135), 32: (0, 136)}, 50: {0: (1, {'@': 82}), 1: (1, {'@': 82}), 2: (1, {'@': 82}), 3: (1, {'@': 82}), 4: (1, {'@': 82}), 5: (1, {'@': 82}), 6: (1, {'@': 82}), 7: (1, {'@': 82}), 8: (1, {'@': 82}), 9: (1, {'@': 82}), 10: (1, {'@': 82})}, 51: {3: (0, 152)}, 52: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 5: (0, 39), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 53: {73: (0, 169), 72: (0, 168), 79: (0, 160), 80: (0, 148), 81: (0, 236)}, 54: {11: (0, 225)}, 55: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 83}), 68: (1, {'@': 83}), 71: (1, {'@': 83}), 70: (1, {'@': 83}), 77: (1, {'@': 83})}, 56: {0: (1, {'@': 84}), 1: (1, {'@': 84}), 5: (1, {'@': 84}), 2: (1, {'@': 84}), 3: (1, {'@': 84}), 4: (1, {'@': 84})}, 57: {49: (1, {'@': 85}), 28: (1, {'@': 85}), 15: (1, {'@': 85}), 7: (1, {'@': 85}), 8: (1, {'@': 85}), 5: (1, {'@': 85}), 42: (1, {'@': 85}), 30: (1, {'@': 85}), 40: (1, {'@': 85}), 34: (1, {'@': 85}), 55: (1, {'@': 85}), 14: (1, {'@': 85}), 47: (1, {'@': 85}), 1: (1, {'@': 85}), 29: (1, {'@': 85}), 48: (1, {'@': 85}), 19: (1, {'@': 85}), 58: (1, {'@': 85}), 54: (1, {'@': 85}), 12: (1, {'@': 85}), 3: (1, {'@': 85}), 4: (1, {'@': 85}), 44: (1, {'@': 85})}, 58: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 76), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 59: {3: (0, 247)}, 60: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 86}), 68: (1, {'@': 86}), 71: (1, {'@': 86}), 70: (1, {'@': 86}), 77: (1, {'@': 86})}, 61: {0: (1, {'@': 87}), 1: (1, {'@': 87}), 2: (1, {'@': 87}), 3: (1, {'@': 87}), 4: (1, {'@': 87}), 5: (1, {'@': 87}), 6: (1, {'@': 87}), 7: (1, {'@': 87}), 8: (1, {'@': 87}), 9: (1, {'@': 87}), 10: (1, {'@': 87})}, 62: {11: (0, 402)}, 63: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 22: (0, 55), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 64: {49: (1, {'@': 88}), 28: (1, {'@': 88}), 15: (1, {'@': 88}), 7: (1, {'@': 88}), 8: (1, {'@': 88}), 5: (1, {'@': 88}), 42: (1, {'@': 88}), 30: (1, {'@': 88}), 40: (1, {'@': 88}), 34: (1, {'@': 88}), 55: (1, {'@': 88}), 14: (1, {'@': 88}), 47: (1, {'@': 88}), 1: (1, {'@': 88}), 29: (1, {'@': 88}), 48: (1, {'@': 88}), 19: (1, {'@': 88}), 58: (1, {'@': 88}), 54: (1, {'@': 88}), 12: (1, {'@': 88}), 3: (1, {'@': 88}), 4: (1, {'@': 88}), 44: (1, {'@': 88})}, 65: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 68: (0, 334), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 66: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 89}), 68: (1, {'@': 89}), 71: (1, {'@': 89}), 70: (1, {'@': 89}), 77: (1, {'@': 89})}, 67: {49: (1, {'@': 90}), 28: (1, {'@': 90}), 15: (1, {'@': 90}), 7: (1, {'@': 90}), 8: (1, {'@': 90}), 5: (1, {'@': 90}), 42: (1, {'@': 90}), 30: (1, {'@': 90}), 40: (1, {'@': 90}), 34: (1, {'@': 90}), 55: (1, {'@': 90}), 14: (1, {'@': 90}), 47: (1, {'@': 90}), 1: (1, {'@': 90}), 29: (1, {'@': 90}), 48: (1, {'@': 90}), 19: (1, {'@': 90}), 58: (1, {'@': 90}), 54: (1, {'@': 90}), 12: (1, {'@': 90}), 3: (1, {'@': 90}), 4: (1, {'@': 90}), 44: (1, {'@': 90})}, 68: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 66), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 69: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 275), 22: (0, 396), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 70: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 88), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 71: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 354), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 72: {0: (1, {'@': 91}), 1: (1, {'@': 91}), 2: (1, {'@': 91}), 3: (1, {'@': 91}), 4: (1, {'@': 91}), 5: (1, {'@': 91}), 6: (1, {'@': 91}), 7: (1, {'@': 91}), 8: (1, {'@': 91}), 9: (1, {'@': 91}), 10: (1, {'@': 91})}, 73: {41: (0, 392), 22: (0, 60), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 74: {82: (0, 341), 83: (0, 412), 84: (0, 375), 85: (0, 211), 0: (0, 318), 86: (0, 280), 50: (0, 188), 87: (0, 417), 88: (0, 99), 89: (0, 348), 4: (0, 314), 90: (0, 96), 1: (0, 246), 5: (0, 324), 2: (0, 287), 3: (1, {'@': 92})}, 75: {14: (0, 270)}, 76: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 93}), 68: (1, {'@': 93}), 71: (1, {'@': 93}), 70: (1, {'@': 93}), 77: (1, {'@': 93})}, 77: {71: (0, 155), 91: (0, 194)}, 78: {3: (0, 110)}, 79: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 5: (0, 27), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 128), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 80: {14: (0, 418)}, 81: {11: (0, 269)}, 82: {3: (0, 262)}, 83: {71: (0, 276), 68: (0, 243)}, 84: {0: (1, {'@': 94}), 1: (1, {'@': 94}), 2: (1, {'@': 94}), 3: (1, {'@': 94}), 4: (1, {'@': 94}), 5: (1, {'@': 94}), 6: (1, {'@': 94}), 7: (1, {'@': 94}), 8: (1, {'@': 94}), 9: (1, {'@': 94}), 10: (1, {'@': 94})}, 85: {76: (0, 353), 14: (0, 406), 92: (0, 36), 68: (0, 175), 65: (1, {'@': 95}), 63: (1, {'@': 95}), 60: (1, {'@': 95}), 61: (1, {'@': 95}), 59: (1, {'@': 95}), 66: (1, {'@': 95}), 62: (1, {'@': 95}), 75: (1, {'@': 95}), 64: (1, {'@': 95}), 4: (1, {'@': 95}), 67: (1, {'@': 95})}, 86: {11: (0, 291)}, 87: {71: (0, 186), 68: (0, 345), 93: (0, 351)}, 88: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 96}), 68: (1, {'@': 96}), 71: (1, {'@': 96}), 70: (1, {'@': 96}), 77: (1, {'@': 96})}, 89: {5: (0, 142)}, 90: {75: (0, 105)}, 91: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 4), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 92: {12: (0, 367), 13: (0, 127), 3: (0, 371), 41: (0, 392), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 206), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 38: (0, 316), 54: (0, 311), 58: (0, 344), 16: (0, 328)}, 93: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 97})}, 94: {68: (0, 157)}, 95: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 5: (0, 50), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 9), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 96: {11: (0, 241)}, 97: {3: (0, 220), 68: (0, 171), 94: (0, 197)}, 98: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 5: (0, 14), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 20), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 99: {0: (1, {'@': 98}), 1: (1, {'@': 98}), 5: (1, {'@': 98}), 2: (1, {'@': 98}), 3: (1, {'@': 98}), 4: (1, {'@': 98})}, 100: {49: (1, {'@': 99}), 28: (1, {'@': 99}), 15: (1, {'@': 99}), 7: (1, {'@': 99}), 8: (1, {'@': 99}), 5: (1, {'@': 99}), 42: (1, {'@': 99}), 30: (1, {'@': 99}), 40: (1, {'@': 99}), 34: (1, {'@': 99}), 55: (1, {'@': 99}), 14: (1, {'@': 99}), 47: (1, {'@': 99}), 1: (1, {'@': 99}), 29: (1, {'@': 99}), 48: (1, {'@': 99}), 19: (1, {'@': 99}), 58: (1, {'@': 99}), 54: (1, {'@': 99}), 12: (1, {'@': 99}), 3: (1, {'@': 99}), 4: (1, {'@': 99}), 44: (1, {'@': 99})}, 101: {3: (0, 35)}, 102: {3: (0, 192), 84: (0, 199), 88: (0, 146), 85: (0, 211), 95: (0, 245), 50: (0, 188), 26: (0, 260), 96: (0, 207), 7: (0, 277), 97: (0, 347), 1: (0, 326), 98: (0, 306), 0: (0, 318), 82: (0, 341), 87: (0, 298), 99: (0, 274), 6: (0, 286), 86: (0, 280), 89: (0, 348), 4: (0, 314), 32: (0, 355), 100: (0, 338), 24: (0, 307), 101: (0, 357), 2: (0, 287), 10: (1, {'@': 92}), 8: (1, {'@': 92}), 9: (1, {'@': 100})}, 103: {49: (1, {'@': 101}), 8: (1, {'@': 101}), 30: (1, {'@': 101}), 34: (1, {'@': 101}), 55: (1, {'@': 101}), 14: (1, {'@': 101}), 47: (1, {'@': 101}), 29: (1, {'@': 101}), 19: (1, {'@': 101}), 58: (1, {'@': 101}), 54: (1, {'@': 101}), 3: (1, {'@': 101}), 4: (1, {'@': 101}), 28: (1, {'@': 101}), 7: (1, {'@': 101}), 5: (1, {'@': 101}), 42: (1, {'@': 101}), 40: (1, {'@': 101}), 1: (1, {'@': 101}), 48: (1, {'@': 101}), 12: (1, {'@': 101}), 15: (1, {'@': 101}), 44: (1, {'@': 101})}, 104: {68: (0, 230)}, 105: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 204), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 106: {49: (1, {'@': 102}), 28: (1, {'@': 102}), 15: (1, {'@': 102}), 7: (1, {'@': 102}), 8: (1, {'@': 102}), 5: (1, {'@': 102}), 42: (1, {'@': 102}), 30: (1, {'@': 102}), 40: (1, {'@': 102}), 34: (1, {'@': 102}), 55: (1, {'@': 102}), 14: (1, {'@': 102}), 47: (1, {'@': 102}), 1: (1, {'@': 102}), 29: (1, {'@': 102}), 48: (1, {'@': 102}), 19: (1, {'@': 102}), 58: (1, {'@': 102}), 54: (1, {'@': 102}), 12: (1, {'@': 102}), 3: (1, {'@': 102}), 4: (1, {'@': 102}), 44: (1, {'@': 102})}, 107: {0: (1, {'@': 103}), 1: (1, {'@': 103}), 6: (1, {'@': 103}), 7: (1, {'@': 103}), 8: (1, {'@': 103}), 9: (1, {'@': 103}), 2: (1, {'@': 103}), 3: (1, {'@': 103}), 4: (1, {'@': 103}), 10: (1, {'@': 103})}, 108: {49: (1, {'@': 104}), 28: (1, {'@': 104}), 15: (1, {'@': 104}), 7: (1, {'@': 104}), 8: (1, {'@': 104}), 5: (1, {'@': 104}), 42: (1, {'@': 104}), 30: (1, {'@': 104}), 40: (1, {'@': 104}), 34: (1, {'@': 104}), 55: (1, {'@': 104}), 14: (1, {'@': 104}), 47: (1, {'@': 104}), 1: (1, {'@': 104}), 29: (1, {'@': 104}), 48: (1, {'@': 104}), 19: (1, {'@': 104}), 58: (1, {'@': 104}), 54: (1, {'@': 104}), 12: (1, {'@': 104}), 3: (1, {'@': 104}), 4: (1, {'@': 104}), 44: (1, {'@': 104})}, 109: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 122), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 110: {91: (1, {'@': 105}), 71: (1, {'@': 105})}, 111: {71: (0, 161), 68: (1, {'@': 106})}, 112: {59: (0, 70), 11: (0, 346), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 113: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 185), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 114: {91: (0, 38)}, 115: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 107}), 68: (1, {'@': 107}), 71: (1, {'@': 107}), 70: (1, {'@': 107}), 77: (1, {'@': 107})}, 116: {3: (0, 30)}, 117: {49: (1, {'@': 108}), 28: (1, {'@': 108}), 15: (1, {'@': 108}), 7: (1, {'@': 108}), 8: (1, {'@': 108}), 5: (1, {'@': 108}), 42: (1, {'@': 108}), 30: (1, {'@': 108}), 40: (1, {'@': 108}), 34: (1, {'@': 108}), 55: (1, {'@': 108}), 14: (1, {'@': 108}), 47: (1, {'@': 108}), 1: (1, {'@': 108}), 29: (1, {'@': 108}), 48: (1, {'@': 108}), 19: (1, {'@': 108}), 58: (1, {'@': 108}), 54: (1, {'@': 108}), 12: (1, {'@': 108}), 3: (1, {'@': 108}), 4: (1, {'@': 108}), 44: (1, {'@': 108})}, 118: {91: (1, {'@': 109}), 71: (1, {'@': 109})}, 119: {71: (0, 116), 68: (0, 268)}, 120: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 290), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 121: {0: (1, {'@': 110}), 1: (1, {'@': 110}), 6: (1, {'@': 110}), 7: (1, {'@': 110}), 8: (1, {'@': 110}), 9: (1, {'@': 110}), 2: (1, {'@': 110}), 3: (1, {'@': 110}), 4: (1, {'@': 110}), 10: (1, {'@': 110})}, 122: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 68: (1, {'@': 111}), 71: (1, {'@': 111})}, 123: {91: (0, 2)}, 124: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 308), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 125: {72: (1, {'@': 112}), 5: (1, {'@': 112}), 73: (1, {'@': 112})}, 126: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 340), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 127: {49: (1, {'@': 113}), 28: (1, {'@': 113}), 63: (1, {'@': 113}), 15: (1, {'@': 113}), 7: (1, {'@': 113}), 8: (1, {'@': 113}), 5: (1, {'@': 113}), 66: (1, {'@': 113}), 42: (1, {'@': 113}), 30: (1, {'@': 113}), 40: (1, {'@': 113}), 34: (1, {'@': 113}), 55: (1, {'@': 113}), 14: (1, {'@': 113}), 47: (1, {'@': 113}), 65: (1, {'@': 113}), 1: (1, {'@': 113}), 60: (1, {'@': 113}), 29: (1, {'@': 113}), 48: (1, {'@': 113}), 11: (1, {'@': 113}), 19: (1, {'@': 113}), 61: (1, {'@': 113}), 59: (1, {'@': 113}), 58: (1, {'@': 113}), 54: (1, {'@': 113}), 12: (1, {'@': 113}), 62: (1, {'@': 113}), 64: (1, {'@': 113}), 3: (1, {'@': 113}), 4: (1, {'@': 113}), 67: (1, {'@': 113}), 44: (1, {'@': 113}), 68: (1, {'@': 113}), 71: (1, {'@': 113}), 77: (1, {'@': 113}), 70: (1, {'@': 113}), 78: (1, {'@': 113})}, 128: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 5: (0, 84), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 129: {11: (1, {'@': 114}), 0: (1, {'@': 114}), 1: (1, {'@': 114}), 6: (1, {'@': 114}), 7: (1, {'@': 114}), 8: (1, {'@': 114}), 9: (1, {'@': 114}), 2: (1, {'@': 114}), 3: (1, {'@': 114}), 4: (1, {'@': 114}), 10: (1, {'@': 114})}, 130: {12: (0, 367), 13: (0, 127), 3: (0, 371), 41: (0, 392), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 233), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 38: (0, 316), 54: (0, 311), 58: (0, 344), 16: (0, 328)}, 131: {49: (1, {'@': 115}), 28: (1, {'@': 115}), 15: (1, {'@': 115}), 7: (1, {'@': 115}), 8: (1, {'@': 115}), 5: (1, {'@': 115}), 42: (1, {'@': 115}), 30: (1, {'@': 115}), 40: (1, {'@': 115}), 34: (1, {'@': 115}), 55: (1, {'@': 115}), 14: (1, {'@': 115}), 47: (1, {'@': 115}), 1: (1, {'@': 115}), 29: (1, {'@': 115}), 48: (1, {'@': 115}), 19: (1, {'@': 115}), 58: (1, {'@': 115}), 54: (1, {'@': 115}), 12: (1, {'@': 115}), 3: (1, {'@': 115}), 4: (1, {'@': 115}), 44: (1, {'@': 115})}, 132: {49: (1, {'@': 116}), 28: (1, {'@': 116}), 15: (1, {'@': 116}), 7: (1, {'@': 116}), 8: (1, {'@': 116}), 5: (1, {'@': 116}), 42: (1, {'@': 116}), 30: (1, {'@': 116}), 40: (1, {'@': 116}), 34: (1, {'@': 116}), 55: (1, {'@': 116}), 14: (1, {'@': 116}), 47: (1, {'@': 116}), 1: (1, {'@': 116}), 29: (1, {'@': 116}), 48: (1, {'@': 116}), 19: (1, {'@': 116}), 58: (1, {'@': 116}), 54: (1, {'@': 116}), 12: (1, {'@': 116}), 3: (1, {'@': 116}), 4: (1, {'@': 116}), 44: (1, {'@': 116})}, 133: {49: (1, {'@': 117}), 28: (1, {'@': 117}), 15: (1, {'@': 117}), 7: (1, {'@': 117}), 8: (1, {'@': 117}), 5: (1, {'@': 117}), 42: (1, {'@': 117}), 30: (1, {'@': 117}), 40: (1, {'@': 117}), 34: (1, {'@': 117}), 55: (1, {'@': 117}), 14: (1, {'@': 117}), 47: (1, {'@': 117}), 1: (1, {'@': 117}), 29: (1, {'@': 117}), 48: (1, {'@': 117}), 19: (1, {'@': 117}), 58: (1, {'@': 117}), 54: (1, {'@': 117}), 12: (1, {'@': 117}), 3: (1, {'@': 117}), 4: (1, {'@': 117}), 44: (1, {'@': 117})}, 134: {102: (0, 139), 11: (0, 129), 70: (0, 391)}, 135: {78: (0, 193)}, 136: {78: (0, 176)}, 137: {49: (1, {'@': 118}), 8: (1, {'@': 118}), 30: (1, {'@': 118}), 34: (1, {'@': 118}), 55: (1, {'@': 118}), 14: (1, {'@': 118}), 47: (1, {'@': 118}), 29: (1, {'@': 118}), 19: (1, {'@': 118}), 58: (1, {'@': 118}), 54: (1, {'@': 118}), 103: (1, {'@': 118}), 3: (1, {'@': 118}), 4: (1, {'@': 118}), 28: (1, {'@': 118}), 7: (1, {'@': 118}), 5: (1, {'@': 118}), 42: (1, {'@': 118}), 40: (1, {'@': 118}), 1: (1, {'@': 118}), 48: (1, {'@': 118}), 12: (1, {'@': 118}), 15: (1, {'@': 118}), 44: (1, {'@': 118})}, 138: {0: (1, {'@': 119}), 1: (1, {'@': 119}), 2: (1, {'@': 119}), 3: (1, {'@': 119}), 4: (1, {'@': 119}), 5: (1, {'@': 119}), 6: (1, {'@': 119}), 7: (1, {'@': 119}), 8: (1, {'@': 119}), 9: (1, {'@': 119}), 10: (1, {'@': 119})}, 139: {11: (0, 29), 70: (0, 40)}, 140: {93: (0, 119), 71: (0, 186), 68: (0, 123)}, 141: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 5: (0, 153), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 142: {49: (1, {'@': 120}), 28: (1, {'@': 120}), 15: (1, {'@': 120}), 7: (1, {'@': 120}), 8: (1, {'@': 120}), 5: (1, {'@': 120}), 42: (1, {'@': 120}), 30: (1, {'@': 120}), 40: (1, {'@': 120}), 34: (1, {'@': 120}), 55: (1, {'@': 120}), 14: (1, {'@': 120}), 47: (1, {'@': 120}), 1: (1, {'@': 120}), 29: (1, {'@': 120}), 48: (1, {'@': 120}), 19: (1, {'@': 120}), 58: (1, {'@': 120}), 54: (1, {'@': 120}), 12: (1, {'@': 120}), 3: (1, {'@': 120}), 4: (1, {'@': 120}), 44: (1, {'@': 120}), 103: (1, {'@': 120})}, 143: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 42), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 5: (0, 33), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 144: {75: (0, 292)}, 145: {72: (1, {'@': 121}), 5: (1, {'@': 121}), 73: (1, {'@': 121})}, 146: {0: (1, {'@': 122}), 1: (1, {'@': 122}), 6: (1, {'@': 122}), 7: (1, {'@': 122}), 8: (1, {'@': 122}), 9: (1, {'@': 122}), 2: (1, {'@': 122}), 3: (1, {'@': 122}), 4: (1, {'@': 122}), 10: (1, {'@': 122})}, 147: {0: (1, {'@': 123}), 1: (1, {'@': 123}), 2: (1, {'@': 123}), 3: (1, {'@': 123}), 4: (1, {'@': 123})}, 148: {81: (0, 240), 79: (0, 226), 73: (0, 169), 72: (0, 168), 5: (0, 208)}, 149: {65: (1, {'@': 124}), 60: (1, {'@': 124}), 63: (1, {'@': 124}), 11: (1, {'@': 124}), 61: (1, {'@': 124}), 59: (1, {'@': 124}), 66: (1, {'@': 124}), 62: (1, {'@': 124}), 64: (1, {'@': 124}), 67: (1, {'@': 124}), 68: (1, {'@': 124}), 71: (1, {'@': 124}), 70: (1, {'@': 124}), 77: (1, {'@': 124})}, 150: {91: (0, 53)}, 151: {78: (0, 178)}, 152: {104: (0, 320), 71: (0, 313), 68: (0, 339)}, 153: {0: (1, {'@': 125}), 1: (1, {'@': 125}), 2: (1, {'@': 125}), 3: (1, {'@': 125}), 4: (1, {'@': 125}), 5: (1, {'@': 125}), 6: (1, {'@': 125}), 7: (1, {'@': 125}), 8: (1, {'@': 125}), 9: (1, {'@': 125}), 10: (1, {'@': 125})}, 154: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 126}), 68: (1, {'@': 126}), 71: (1, {'@': 126}), 70: (1, {'@': 126}), 77: (1, {'@': 126})}, 155: {3: (0, 118)}, 156: {0: (1, {'@': 127}), 1: (1, {'@': 127}), 2: (1, {'@': 127}), 3: (1, {'@': 127}), 4: (1, {'@': 127}), 5: (1, {'@': 127}), 6: (1, {'@': 127}), 7: (1, {'@': 127}), 8: (1, {'@': 127}), 9: (1, {'@': 127}), 10: (1, {'@': 127})}, 157: {49: (1, {'@': 128}), 8: (1, {'@': 128}), 66: (1, {'@': 128}), 30: (1, {'@': 128}), 34: (1, {'@': 128}), 55: (1, {'@': 128}), 14: (1, {'@': 128}), 47: (1, {'@': 128}), 60: (1, {'@': 128}), 29: (1, {'@': 128}), 19: (1, {'@': 128}), 58: (1, {'@': 128}), 54: (1, {'@': 128}), 3: (1, {'@': 128}), 4: (1, {'@': 128}), 67: (1, {'@': 128}), 28: (1, {'@': 128}), 63: (1, {'@': 128}), 7: (1, {'@': 128}), 5: (1, {'@': 128}), 42: (1, {'@': 128}), 40: (1, {'@': 128}), 65: (1, {'@': 128}), 1: (1, {'@': 128}), 48: (1, {'@': 128}), 11: (1, {'@': 128}), 61: (1, {'@': 128}), 59: (1, {'@': 128}), 62: (1, {'@': 128}), 12: (1, {'@': 128}), 64: (1, {'@': 128}), 15: (1, {'@': 128}), 44: (1, {'@': 128}), 68: (1, {'@': 128}), 71: (1, {'@': 128}), 77: (1, {'@': 128}), 70: (1, {'@': 128}), 78: (1, {'@': 128})}, 158: {3: (0, 325)}, 159: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 5: (0, 61), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 160: {72: (1, {'@': 129}), 5: (1, {'@': 129}), 73: (1, {'@': 129})}, 161: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 305), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 162: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 11: (0, 57), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 163: {59: (0, 70), 60: (0, 68), 61: (0, 73), 70: (0, 217), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 164: {91: (0, 143)}, 165: {68: (1, {'@': 130}), 71: (1, {'@': 130})}, 166: {105: (0, 177), 106: (0, 151)}, 167: {14: (0, 358)}, 168: {70: (0, 259)}, 169: {12: (0, 367), 13: (0, 127), 3: (0, 371), 41: (0, 392), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 163), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 38: (0, 316), 54: (0, 311), 58: (0, 344), 16: (0, 328)}, 170: {12: (0, 367), 3: (0, 192), 32: (0, 254), 17: (0, 48)}, 171: {11: (0, 239)}, 172: {3: (0, 331)}, 173: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 162), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 11: (0, 350), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 174: {0: (1, {'@': 131}), 1: (1, {'@': 131}), 2: (1, {'@': 131}), 3: (1, {'@': 131}), 4: (1, {'@': 131}), 5: (1, {'@': 131}), 6: (1, {'@': 131}), 7: (1, {'@': 131}), 8: (1, {'@': 131}), 9: (1, {'@': 131}), 10: (1, {'@': 131})}, 175: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 209), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 176: {65: (1, {'@': 132}), 60: (1, {'@': 132}), 63: (1, {'@': 132}), 11: (1, {'@': 132}), 61: (1, {'@': 132}), 59: (1, {'@': 132}), 66: (1, {'@': 132}), 62: (1, {'@': 132}), 75: (1, {'@': 132}), 64: (1, {'@': 132}), 67: (1, {'@': 132}), 68: (1, {'@': 132}), 71: (1, {'@': 132}), 77: (1, {'@': 132}), 70: (1, {'@': 132})}, 177: {78: (0, 195)}, 178: {91: (1, {'@': 133})}, 179: {4: (0, 166), 107: (0, 257), 65: (1, {'@': 134}), 63: (1, {'@': 134}), 60: (1, {'@': 134}), 77: (1, {'@': 134}), 61: (1, {'@': 134}), 59: (1, {'@': 134}), 66: (1, {'@': 134}), 62: (1, {'@': 134}), 64: (1, {'@': 134}), 67: (1, {'@': 134}), 91: (1, {'@': 135})}, 180: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 181), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 181: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 136}), 68: (1, {'@': 136}), 71: (1, {'@': 136}), 70: (1, {'@': 136}), 77: (1, {'@': 136})}, 182: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 5: (0, 202), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 183: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 108: (0, 45), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 205), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344), 5: (1, {'@': 137})}, 184: {65: (1, {'@': 138}), 60: (1, {'@': 138}), 63: (1, {'@': 138}), 11: (1, {'@': 138}), 61: (1, {'@': 138}), 59: (1, {'@': 138}), 66: (1, {'@': 138}), 62: (1, {'@': 138}), 64: (1, {'@': 138}), 67: (1, {'@': 138}), 68: (1, {'@': 138}), 71: (1, {'@': 138}), 70: (1, {'@': 138}), 77: (1, {'@': 138})}, 185: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 139}), 68: (1, {'@': 139}), 71: (1, {'@': 139}), 70: (1, {'@': 139}), 77: (1, {'@': 139})}, 186: {3: (0, 101)}, 187: {5: (0, 242)}, 188: {0: (1, {'@': 140}), 1: (1, {'@': 140}), 2: (1, {'@': 140}), 3: (1, {'@': 140}), 4: (1, {'@': 140})}, 189: {0: (1, {'@': 141}), 1: (1, {'@': 141}), 2: (1, {'@': 141}), 3: (1, {'@': 141}), 4: (1, {'@': 141}), 5: (1, {'@': 141}), 6: (1, {'@': 141}), 7: (1, {'@': 141}), 8: (1, {'@': 141}), 9: (1, {'@': 141}), 10: (1, {'@': 141})}, 190: {71: (0, 276), 68: (0, 1)}, 191: {11: (0, 7)}, 192: {76: (0, 353), 92: (0, 282), 78: (1, {'@': 95}), 75: (1, {'@': 95})}, 193: {65: (1, {'@': 142}), 60: (1, {'@': 142}), 63: (1, {'@': 142}), 11: (1, {'@': 142}), 61: (1, {'@': 142}), 59: (1, {'@': 142}), 66: (1, {'@': 142}), 62: (1, {'@': 142}), 75: (1, {'@': 142}), 64: (1, {'@': 142}), 67: (1, {'@': 142}), 68: (1, {'@': 142}), 71: (1, {'@': 142}), 77: (1, {'@': 142}), 70: (1, {'@': 142})}, 194: {82: (0, 341), 84: (0, 375), 85: (0, 211), 0: (0, 318), 86: (0, 280), 50: (0, 188), 5: (0, 356), 87: (0, 417), 88: (0, 99), 89: (0, 348), 4: (0, 314), 83: (0, 293), 90: (0, 96), 1: (0, 246), 2: (0, 287), 3: (1, {'@': 92})}, 195: {91: (1, {'@': 143})}, 196: {0: (1, {'@': 144}), 1: (1, {'@': 144}), 6: (1, {'@': 144}), 7: (1, {'@': 144}), 8: (1, {'@': 144}), 9: (1, {'@': 144}), 2: (1, {'@': 144}), 3: (1, {'@': 144}), 4: (1, {'@': 144}), 10: (1, {'@': 144}), 5: (1, {'@': 144})}, 197: {3: (0, 304)}, 198: {68: (1, {'@': 145}), 71: (1, {'@': 145})}, 199: {0: (0, 332), 3: (0, 295), 10: (0, 300), 8: (0, 333), 46: (0, 289)}, 200: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 154), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 201: {91: (0, 235)}, 202: {72: (1, {'@': 146}), 5: (1, {'@': 146}), 73: (1, {'@': 146})}, 203: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 390), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 204: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 147}), 68: (1, {'@': 147}), 71: (1, {'@': 147}), 70: (1, {'@': 147}), 77: (1, {'@': 147})}, 205: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344), 5: (1, {'@': 148})}, 206: {59: (0, 70), 68: (0, 164), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 207: {0: (1, {'@': 149}), 1: (1, {'@': 149}), 6: (1, {'@': 149}), 7: (1, {'@': 149}), 8: (1, {'@': 149}), 9: (1, {'@': 149}), 2: (1, {'@': 149}), 3: (1, {'@': 149}), 4: (1, {'@': 149}), 10: (1, {'@': 149})}, 208: {49: (1, {'@': 150}), 28: (1, {'@': 150}), 15: (1, {'@': 150}), 7: (1, {'@': 150}), 8: (1, {'@': 150}), 5: (1, {'@': 150}), 42: (1, {'@': 150}), 30: (1, {'@': 150}), 40: (1, {'@': 150}), 34: (1, {'@': 150}), 55: (1, {'@': 150}), 14: (1, {'@': 150}), 47: (1, {'@': 150}), 1: (1, {'@': 150}), 29: (1, {'@': 150}), 48: (1, {'@': 150}), 19: (1, {'@': 150}), 58: (1, {'@': 150}), 54: (1, {'@': 150}), 12: (1, {'@': 150}), 3: (1, {'@': 150}), 4: (1, {'@': 150}), 44: (1, {'@': 150})}, 209: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 151}), 68: (1, {'@': 151}), 71: (1, {'@': 151}), 70: (1, {'@': 151}), 77: (1, {'@': 151})}, 210: {68: (1, {'@': 152}), 71: (1, {'@': 152})}, 211: {2: (0, 271), 1: (0, 281), 0: (1, {'@': 153}), 3: (1, {'@': 153}), 10: (1, {'@': 153}), 8: (1, {'@': 153})}, 212: {63: (1, {'@': 154}), 66: (1, {'@': 154}), 14: (1, {'@': 154}), 76: (1, {'@': 154}), 65: (1, {'@': 154}), 60: (1, {'@': 154}), 61: (1, {'@': 154}), 59: (1, {'@': 154}), 62: (1, {'@': 154}), 75: (1, {'@': 154}), 64: (1, {'@': 154}), 4: (1, {'@': 154}), 68: (1, {'@': 154}), 67: (1, {'@': 154}), 78: (1, {'@': 154}), 70: (1, {'@': 154}), 11: (1, {'@': 154}), 77: (1, {'@': 154}), 71: (1, {'@': 154})}, 213: {0: (1, {'@': 155}), 1: (1, {'@': 155}), 6: (1, {'@': 155}), 7: (1, {'@': 155}), 8: (1, {'@': 155}), 9: (1, {'@': 155}), 2: (1, {'@': 155}), 3: (1, {'@': 155}), 4: (1, {'@': 155}), 10: (1, {'@': 155}), 5: (1, {'@': 155})}, 214: {0: (1, {'@': 156}), 1: (1, {'@': 156}), 6: (1, {'@': 156}), 7: (1, {'@': 156}), 8: (1, {'@': 156}), 9: (1, {'@': 156}), 2: (1, {'@': 156}), 3: (1, {'@': 156}), 4: (1, {'@': 156}), 10: (1, {'@': 156})}, 215: {0: (1, {'@': 157}), 1: (1, {'@': 157}), 5: (1, {'@': 157}), 2: (1, {'@': 157}), 3: (1, {'@': 157}), 4: (1, {'@': 157})}, 216: {68: (1, {'@': 158}), 71: (1, {'@': 158})}, 217: {91: (0, 388), 72: (1, {'@': 159}), 5: (1, {'@': 159}), 73: (1, {'@': 159})}, 218: {49: (1, {'@': 160}), 8: (1, {'@': 160}), 30: (1, {'@': 160}), 34: (1, {'@': 160}), 55: (1, {'@': 160}), 14: (1, {'@': 160}), 47: (1, {'@': 160}), 29: (1, {'@': 160}), 19: (1, {'@': 160}), 58: (1, {'@': 160}), 54: (1, {'@': 160}), 103: (1, {'@': 160}), 3: (1, {'@': 160}), 4: (1, {'@': 160}), 28: (1, {'@': 160}), 7: (1, {'@': 160}), 5: (1, {'@': 160}), 42: (1, {'@': 160}), 40: (1, {'@': 160}), 1: (1, {'@': 160}), 48: (1, {'@': 160}), 12: (1, {'@': 160}), 15: (1, {'@': 160}), 44: (1, {'@': 160})}, 219: {11: (1, {'@': 161}), 70: (1, {'@': 161})}, 220: {3: (0, 296)}, 221: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 5: (0, 133), 47: (0, 407), 23: (0, 223), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 222: {49: (1, {'@': 162}), 28: (1, {'@': 162}), 15: (1, {'@': 162}), 7: (1, {'@': 162}), 8: (1, {'@': 162}), 5: (1, {'@': 162}), 42: (1, {'@': 162}), 30: (1, {'@': 162}), 40: (1, {'@': 162}), 34: (1, {'@': 162}), 55: (1, {'@': 162}), 14: (1, {'@': 162}), 47: (1, {'@': 162}), 1: (1, {'@': 162}), 29: (1, {'@': 162}), 48: (1, {'@': 162}), 19: (1, {'@': 162}), 58: (1, {'@': 162}), 54: (1, {'@': 162}), 12: (1, {'@': 162}), 3: (1, {'@': 162}), 4: (1, {'@': 162}), 44: (1, {'@': 162})}, 223: {49: (1, {'@': 163}), 8: (1, {'@': 163}), 30: (1, {'@': 163}), 34: (1, {'@': 163}), 55: (1, {'@': 163}), 14: (1, {'@': 163}), 47: (1, {'@': 163}), 29: (1, {'@': 163}), 19: (1, {'@': 163}), 58: (1, {'@': 163}), 54: (1, {'@': 163}), 3: (1, {'@': 163}), 4: (1, {'@': 163}), 28: (1, {'@': 163}), 7: (1, {'@': 163}), 5: (1, {'@': 163}), 42: (1, {'@': 163}), 40: (1, {'@': 163}), 1: (1, {'@': 163}), 48: (1, {'@': 163}), 12: (1, {'@': 163}), 15: (1, {'@': 163}), 44: (1, {'@': 163})}, 224: {3: (0, 295), 0: (0, 332)}, 225: {0: (1, {'@': 164}), 1: (1, {'@': 164}), 2: (1, {'@': 164}), 3: (1, {'@': 164}), 4: (1, {'@': 164}), 5: (1, {'@': 164}), 6: (1, {'@': 164}), 7: (1, {'@': 164}), 8: (1, {'@': 164}), 9: (1, {'@': 164}), 10: (1, {'@': 164})}, 226: {72: (1, {'@': 165}), 5: (1, {'@': 165}), 73: (1, {'@': 165})}, 227: {3: (0, 404)}, 228: {91: (0, 183)}, 229: {78: (0, 365)}, 230: {49: (1, {'@': 166}), 8: (1, {'@': 166}), 66: (1, {'@': 166}), 30: (1, {'@': 166}), 34: (1, {'@': 166}), 55: (1, {'@': 166}), 14: (1, {'@': 166}), 47: (1, {'@': 166}), 60: (1, {'@': 166}), 29: (1, {'@': 166}), 19: (1, {'@': 166}), 58: (1, {'@': 166}), 54: (1, {'@': 166}), 3: (1, {'@': 166}), 4: (1, {'@': 166}), 67: (1, {'@': 166}), 28: (1, {'@': 166}), 63: (1, {'@': 166}), 7: (1, {'@': 166}), 5: (1, {'@': 166}), 42: (1, {'@': 166}), 40: (1, {'@': 166}), 65: (1, {'@': 166}), 1: (1, {'@': 166}), 48: (1, {'@': 166}), 11: (1, {'@': 166}), 61: (1, {'@': 166}), 59: (1, {'@': 166}), 62: (1, {'@': 166}), 12: (1, {'@': 166}), 64: (1, {'@': 166}), 15: (1, {'@': 166}), 44: (1, {'@': 166}), 68: (1, {'@': 166}), 71: (1, {'@': 166}), 77: (1, {'@': 166}), 70: (1, {'@': 166}), 78: (1, {'@': 166})}, 231: {49: (1, {'@': 167}), 28: (1, {'@': 167}), 63: (1, {'@': 167}), 15: (1, {'@': 167}), 7: (1, {'@': 167}), 8: (1, {'@': 167}), 5: (1, {'@': 167}), 66: (1, {'@': 167}), 42: (1, {'@': 167}), 30: (1, {'@': 167}), 40: (1, {'@': 167}), 34: (1, {'@': 167}), 55: (1, {'@': 167}), 14: (1, {'@': 167}), 47: (1, {'@': 167}), 65: (1, {'@': 167}), 1: (1, {'@': 167}), 60: (1, {'@': 167}), 29: (1, {'@': 167}), 48: (1, {'@': 167}), 11: (1, {'@': 167}), 19: (1, {'@': 167}), 61: (1, {'@': 167}), 59: (1, {'@': 167}), 58: (1, {'@': 167}), 54: (1, {'@': 167}), 12: (1, {'@': 167}), 62: (1, {'@': 167}), 64: (1, {'@': 167}), 3: (1, {'@': 167}), 4: (1, {'@': 167}), 67: (1, {'@': 167}), 44: (1, {'@': 167}), 68: (1, {'@': 167}), 71: (1, {'@': 167}), 77: (1, {'@': 167}), 70: (1, {'@': 167}), 78: (1, {'@': 167})}, 232: {3: (0, 21)}, 233: {59: (0, 70), 60: (0, 68), 61: (0, 73), 11: (0, 92), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 234: {70: (0, 299), 91: (0, 337)}, 235: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 36: (0, 221), 35: (0, 374), 37: (0, 349), 38: (0, 316), 5: (0, 253), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 236: {72: (1, {'@': 168}), 5: (1, {'@': 168}), 73: (1, {'@': 168})}, 237: {91: (0, 284)}, 238: {109: (0, 222), 39: (0, 137), 103: (0, 255), 34: (0, 80), 49: (1, {'@': 169}), 28: (1, {'@': 169}), 15: (1, {'@': 169}), 7: (1, {'@': 169}), 8: (1, {'@': 169}), 5: (1, {'@': 169}), 42: (1, {'@': 169}), 30: (1, {'@': 169}), 40: (1, {'@': 169}), 55: (1, {'@': 169}), 14: (1, {'@': 169}), 47: (1, {'@': 169}), 1: (1, {'@': 169}), 29: (1, {'@': 169}), 48: (1, {'@': 169}), 19: (1, {'@': 169}), 58: (1, {'@': 169}), 54: (1, {'@': 169}), 12: (1, {'@': 169}), 3: (1, {'@': 169}), 4: (1, {'@': 169}), 44: (1, {'@': 169})}, 239: {0: (1, {'@': 170}), 1: (1, {'@': 170}), 2: (1, {'@': 170}), 3: (1, {'@': 170}), 4: (1, {'@': 170}), 5: (1, {'@': 170}), 6: (1, {'@': 170}), 7: (1, {'@': 170}), 8: (1, {'@': 170}), 9: (1, {'@': 170}), 10: (1, {'@': 170})}, 240: {72: (1, {'@': 171}), 5: (1, {'@': 171}), 73: (1, {'@': 171})}, 241: {0: (1, {'@': 172}), 1: (1, {'@': 172}), 5: (1, {'@': 172}), 2: (1, {'@': 172}), 3: (1, {'@': 172}), 4: (1, {'@': 172})}, 242: {103: (0, 255), 110: (0, 238), 109: (0, 131), 39: (0, 218), 34: (0, 80), 49: (1, {'@': 173}), 28: (1, {'@': 173}), 15: (1, {'@': 173}), 7: (1, {'@': 173}), 8: (1, {'@': 173}), 5: (1, {'@': 173}), 42: (1, {'@': 173}), 30: (1, {'@': 173}), 40: (1, {'@': 173}), 55: (1, {'@': 173}), 14: (1, {'@': 173}), 47: (1, {'@': 173}), 1: (1, {'@': 173}), 29: (1, {'@': 173}), 48: (1, {'@': 173}), 19: (1, {'@': 173}), 58: (1, {'@': 173}), 54: (1, {'@': 173}), 12: (1, {'@': 173}), 3: (1, {'@': 173}), 4: (1, {'@': 173}), 44: (1, {'@': 173})}, 243: {11: (0, 250)}, 244: {59: (0, 70), 60: (0, 68), 61: (0, 73), 70: (0, 309), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 245: {100: (0, 297), 3: (0, 192), 84: (0, 199), 82: (0, 341), 26: (0, 285), 96: (0, 310), 85: (0, 211), 0: (0, 318), 86: (0, 280), 6: (0, 286), 50: (0, 188), 1: (0, 326), 89: (0, 348), 101: (0, 336), 7: (0, 277), 4: (0, 314), 32: (0, 355), 99: (0, 315), 97: (0, 322), 88: (0, 319), 87: (0, 294), 24: (0, 307), 2: (0, 287), 9: (1, {'@': 174}), 10: (1, {'@': 92}), 8: (1, {'@': 92})}, 246: {0: (1, {'@': 175}), 1: (1, {'@': 175}), 2: (1, {'@': 175}), 3: (1, {'@': 175}), 8: (1, {'@': 175})}, 247: {3: (0, 317)}, 248: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 182), 37: (0, 349), 38: (0, 316), 5: (0, 145), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 249: {76: (0, 353), 14: (0, 406), 92: (0, 420)}, 250: {0: (1, {'@': 176}), 1: (1, {'@': 176}), 2: (1, {'@': 176}), 3: (1, {'@': 176}), 4: (1, {'@': 176}), 5: (1, {'@': 176}), 6: (1, {'@': 176}), 7: (1, {'@': 176}), 8: (1, {'@': 176}), 9: (1, {'@': 176}), 10: (1, {'@': 176})}, 251: {0: (1, {'@': 177}), 1: (1, {'@': 177}), 6: (1, {'@': 177}), 7: (1, {'@': 177}), 8: (1, {'@': 177}), 9: (1, {'@': 177}), 2: (1, {'@': 177}), 3: (1, {'@': 177}), 4: (1, {'@': 177}), 10: (1, {'@': 177})}, 252: {11: (0, 130)}, 253: {49: (1, {'@': 178}), 28: (1, {'@': 178}), 15: (1, {'@': 178}), 7: (1, {'@': 178}), 8: (1, {'@': 178}), 5: (1, {'@': 178}), 42: (1, {'@': 178}), 30: (1, {'@': 178}), 40: (1, {'@': 178}), 34: (1, {'@': 178}), 55: (1, {'@': 178}), 14: (1, {'@': 178}), 47: (1, {'@': 178}), 1: (1, {'@': 178}), 29: (1, {'@': 178}), 48: (1, {'@': 178}), 19: (1, {'@': 178}), 58: (1, {'@': 178}), 54: (1, {'@': 178}), 12: (1, {'@': 178}), 3: (1, {'@': 178}), 4: (1, {'@': 178}), 44: (1, {'@': 178})}, 254: {78: (0, 327)}, 255: {4: (0, 166), 107: (0, 228), 91: (1, {'@': 135})}, 256: {3: (0, 369)}, 257: {91: (0, 321)}, 258: {3: (0, 192), 82: (0, 341), 85: (0, 211), 111: (0, 405), 99: (0, 384), 84: (0, 373), 0: (0, 318), 86: (0, 280), 50: (0, 188), 89: (0, 348), 88: (0, 366), 97: (0, 380), 4: (0, 314), 32: (0, 355), 5: (0, 395), 87: (0, 364), 1: (0, 246), 24: (0, 307), 2: (0, 287), 8: (1, {'@': 92})}, 259: {91: (0, 248), 72: (1, {'@': 179}), 5: (1, {'@': 179}), 73: (1, {'@': 179})}, 260: {0: (1, {'@': 180}), 1: (1, {'@': 180}), 6: (1, {'@': 180}), 7: (1, {'@': 180}), 8: (1, {'@': 180}), 9: (1, {'@': 180}), 2: (1, {'@': 180}), 3: (1, {'@': 180}), 4: (1, {'@': 180}), 10: (1, {'@': 180})}, 261: {65: (1, {'@': 181}), 60: (1, {'@': 181}), 63: (1, {'@': 181}), 11: (1, {'@': 181}), 61: (1, {'@': 181}), 59: (1, {'@': 181}), 66: (1, {'@': 181}), 62: (1, {'@': 181}), 64: (1, {'@': 181}), 67: (1, {'@': 181}), 68: (1, {'@': 181}), 71: (1, {'@': 181}), 77: (1, {'@': 181}), 70: (1, {'@': 181})}, 262: {3: (0, 210)}, 263: {14: (0, 386)}, 264: {0: (1, {'@': 182}), 1: (1, {'@': 182}), 6: (1, {'@': 182}), 7: (1, {'@': 182}), 8: (1, {'@': 182}), 9: (1, {'@': 182}), 2: (1, {'@': 182}), 3: (1, {'@': 182}), 4: (1, {'@': 182}), 10: (1, {'@': 182})}, 265: {8: (0, 333), 46: (0, 252)}, 266: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 28), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 5: (0, 17), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344)}, 267: {0: (1, {'@': 183}), 1: (1, {'@': 183}), 2: (1, {'@': 183}), 3: (1, {'@': 183}), 4: (1, {'@': 183}), 5: (1, {'@': 183}), 6: (1, {'@': 183}), 7: (1, {'@': 183}), 8: (1, {'@': 183}), 9: (1, {'@': 183}), 10: (1, {'@': 183})}, 268: {91: (0, 24)}, 269: {49: (1, {'@': 184}), 28: (1, {'@': 184}), 15: (1, {'@': 184}), 7: (1, {'@': 184}), 8: (1, {'@': 184}), 5: (1, {'@': 184}), 42: (1, {'@': 184}), 30: (1, {'@': 184}), 40: (1, {'@': 184}), 34: (1, {'@': 184}), 55: (1, {'@': 184}), 14: (1, {'@': 184}), 47: (1, {'@': 184}), 1: (1, {'@': 184}), 29: (1, {'@': 184}), 48: (1, {'@': 184}), 19: (1, {'@': 184}), 58: (1, {'@': 184}), 54: (1, {'@': 184}), 12: (1, {'@': 184}), 3: (1, {'@': 184}), 4: (1, {'@': 184}), 44: (1, {'@': 184})}, 270: {12: (0, 367), 13: (0, 127), 3: (0, 371), 41: (0, 392), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 37), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 38: (0, 316), 54: (0, 311), 58: (0, 344), 16: (0, 328)}, 271: {0: (1, {'@': 185}), 1: (1, {'@': 185}), 2: (1, {'@': 185}), 3: (1, {'@': 185}), 10: (1, {'@': 185}), 8: (1, {'@': 185})}, 272: {3: (0, 232)}, 273: {4: (0, 166), 107: (0, 237), 91: (1, {'@': 135})}, 274: {0: (1, {'@': 186}), 1: (1, {'@': 186}), 6: (1, {'@': 186}), 7: (1, {'@': 186}), 8: (1, {'@': 186}), 9: (1, {'@': 186}), 2: (1, {'@': 186}), 3: (1, {'@': 186}), 4: (1, {'@': 186}), 10: (1, {'@': 186})}, 275: {12: (0, 367), 13: (0, 127), 3: (0, 85), 41: (0, 392), 32: (0, 389), 14: (0, 408), 22: (0, 46), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 38: (0, 316), 54: (0, 311), 58: (0, 344), 16: (0, 328)}, 276: {94: (0, 272), 3: (0, 352)}, 277: {3: (0, 134)}, 278: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 244), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 279: {11: (0, 302)}, 280: {84: (0, 224), 82: (0, 341), 88: (0, 138), 85: (0, 211), 0: (0, 318), 1: (0, 246), 89: (0, 348), 50: (0, 147), 4: (0, 314), 2: (0, 287), 3: (1, {'@': 92})}, 281: {0: (1, {'@': 187}), 1: (1, {'@': 187}), 2: (1, {'@': 187}), 3: (1, {'@': 187}), 10: (1, {'@': 187}), 8: (1, {'@': 187})}, 282: {76: (0, 172), 78: (1, {'@': 78}), 75: (1, {'@': 78})}, 283: {14: (0, 358), 75: (0, 91), 11: (1, {'@': 188})}, 284: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 108: (0, 89), 36: (0, 205), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344), 5: (1, {'@': 137})}, 285: {0: (1, {'@': 189}), 1: (1, {'@': 189}), 6: (1, {'@': 189}), 7: (1, {'@': 189}), 8: (1, {'@': 189}), 9: (1, {'@': 189}), 2: (1, {'@': 189}), 3: (1, {'@': 189}), 4: (1, {'@': 189}), 10: (1, {'@': 189})}, 286: {50: (0, 251), 4: (0, 314)}, 287: {0: (1, {'@': 190}), 1: (1, {'@': 190}), 2: (1, {'@': 190}), 3: (1, {'@': 190}), 10: (1, {'@': 190}), 8: (1, {'@': 190})}, 288: {49: (1, {'@': 191}), 28: (1, {'@': 191}), 15: (1, {'@': 191}), 7: (1, {'@': 191}), 8: (1, {'@': 191}), 5: (1, {'@': 191}), 42: (1, {'@': 191}), 30: (1, {'@': 191}), 40: (1, {'@': 191}), 34: (1, {'@': 191}), 55: (1, {'@': 191}), 14: (1, {'@': 191}), 47: (1, {'@': 191}), 1: (1, {'@': 191}), 29: (1, {'@': 191}), 48: (1, {'@': 191}), 19: (1, {'@': 191}), 58: (1, {'@': 191}), 54: (1, {'@': 191}), 12: (1, {'@': 191}), 3: (1, {'@': 191}), 4: (1, {'@': 191}), 44: (1, {'@': 191})}, 289: {11: (0, 213)}, 290: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 192}), 68: (1, {'@': 192}), 71: (1, {'@': 192}), 70: (1, {'@': 192}), 77: (1, {'@': 192})}, 291: {0: (1, {'@': 193}), 1: (1, {'@': 193}), 5: (1, {'@': 193}), 2: (1, {'@': 193}), 3: (1, {'@': 193}), 4: (1, {'@': 193})}, 292: {41: (0, 392), 22: (0, 93), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 293: {82: (0, 341), 84: (0, 375), 85: (0, 211), 90: (0, 86), 0: (0, 318), 86: (0, 280), 50: (0, 188), 89: (0, 348), 87: (0, 56), 4: (0, 314), 5: (0, 264), 88: (0, 215), 1: (0, 246), 2: (0, 287), 3: (1, {'@': 92})}, 294: {0: (1, {'@': 194}), 1: (1, {'@': 194}), 6: (1, {'@': 194}), 7: (1, {'@': 194}), 8: (1, {'@': 194}), 9: (1, {'@': 194}), 2: (1, {'@': 194}), 3: (1, {'@': 194}), 4: (1, {'@': 194}), 10: (1, {'@': 194})}, 295: {3: (0, 167)}, 296: {104: (0, 190), 68: (0, 343), 71: (0, 313)}, 297: {0: (1, {'@': 195}), 1: (1, {'@': 195}), 6: (1, {'@': 195}), 7: (1, {'@': 195}), 8: (1, {'@': 195}), 9: (1, {'@': 195}), 2: (1, {'@': 195}), 3: (1, {'@': 195}), 4: (1, {'@': 195}), 10: (1, {'@': 195})}, 298: {0: (1, {'@': 196}), 1: (1, {'@': 196}), 6: (1, {'@': 196}), 7: (1, {'@': 196}), 8: (1, {'@': 196}), 9: (1, {'@': 196}), 2: (1, {'@': 196}), 3: (1, {'@': 196}), 4: (1, {'@': 196}), 10: (1, {'@': 196})}, 299: {3: (0, 378)}, 300: {3: (0, 234)}, 301: {3: (0, 198)}, 302: {0: (1, {'@': 197}), 1: (1, {'@': 197}), 2: (1, {'@': 197}), 3: (1, {'@': 197}), 4: (1, {'@': 197}), 5: (1, {'@': 197}), 6: (1, {'@': 197}), 7: (1, {'@': 197}), 8: (1, {'@': 197}), 9: (1, {'@': 197}), 10: (1, {'@': 197})}, 303: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 198}), 68: (1, {'@': 198}), 71: (1, {'@': 198}), 70: (1, {'@': 198}), 77: (1, {'@': 198})}, 304: {3: (0, 329)}, 305: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 68: (1, {'@': 199}), 71: (1, {'@': 199})}, 306: {}, 307: {11: (0, 196)}, 308: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 200}), 68: (1, {'@': 200}), 71: (1, {'@': 200}), 70: (1, {'@': 200}), 77: (1, {'@': 200})}, 309: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 115), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 310: {0: (1, {'@': 201}), 1: (1, {'@': 201}), 6: (1, {'@': 201}), 7: (1, {'@': 201}), 8: (1, {'@': 201}), 9: (1, {'@': 201}), 2: (1, {'@': 201}), 3: (1, {'@': 201}), 4: (1, {'@': 201}), 10: (1, {'@': 201})}, 311: {65: (1, {'@': 202}), 60: (1, {'@': 202}), 63: (1, {'@': 202}), 11: (1, {'@': 202}), 61: (1, {'@': 202}), 59: (1, {'@': 202}), 66: (1, {'@': 202}), 62: (1, {'@': 202}), 64: (1, {'@': 202}), 67: (1, {'@': 202}), 68: (1, {'@': 202}), 71: (1, {'@': 202}), 70: (1, {'@': 202}), 77: (1, {'@': 202})}, 312: {71: (0, 276), 68: (0, 191)}, 313: {3: (0, 301), 94: (0, 82)}, 314: {47: (0, 256), 13: (0, 127), 3: (0, 249), 45: (0, 231), 16: (0, 229)}, 315: {0: (1, {'@': 203}), 1: (1, {'@': 203}), 6: (1, {'@': 203}), 7: (1, {'@': 203}), 8: (1, {'@': 203}), 9: (1, {'@': 203}), 2: (1, {'@': 203}), 3: (1, {'@': 203}), 4: (1, {'@': 203}), 10: (1, {'@': 203})}, 316: {65: (1, {'@': 204}), 60: (1, {'@': 204}), 63: (1, {'@': 204}), 11: (1, {'@': 204}), 61: (1, {'@': 204}), 59: (1, {'@': 204}), 66: (1, {'@': 204}), 62: (1, {'@': 204}), 64: (1, {'@': 204}), 67: (1, {'@': 204}), 68: (1, {'@': 204}), 71: (1, {'@': 204}), 70: (1, {'@': 204}), 77: (1, {'@': 204})}, 317: {104: (0, 83), 71: (0, 313), 68: (0, 54)}, 318: {1: (0, 246), 84: (0, 227), 85: (0, 211), 2: (0, 287), 3: (1, {'@': 92})}, 319: {0: (1, {'@': 205}), 1: (1, {'@': 205}), 6: (1, {'@': 205}), 7: (1, {'@': 205}), 8: (1, {'@': 205}), 9: (1, {'@': 205}), 2: (1, {'@': 205}), 3: (1, {'@': 205}), 4: (1, {'@': 205}), 10: (1, {'@': 205})}, 320: {71: (0, 276), 68: (0, 279)}, 321: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 108: (0, 187), 35: (0, 374), 36: (0, 205), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344), 5: (1, {'@': 137})}, 322: {0: (1, {'@': 206}), 1: (1, {'@': 206}), 6: (1, {'@': 206}), 7: (1, {'@': 206}), 8: (1, {'@': 206}), 9: (1, {'@': 206}), 2: (1, {'@': 206}), 3: (1, {'@': 206}), 4: (1, {'@': 206}), 10: (1, {'@': 206})}, 323: {65: (1, {'@': 207}), 60: (1, {'@': 207}), 63: (1, {'@': 207}), 11: (1, {'@': 207}), 61: (1, {'@': 207}), 59: (1, {'@': 207}), 66: (1, {'@': 207}), 62: (1, {'@': 207}), 64: (1, {'@': 207}), 67: (1, {'@': 207}), 68: (1, {'@': 207}), 71: (1, {'@': 207}), 70: (1, {'@': 207}), 77: (1, {'@': 207})}, 324: {0: (1, {'@': 208}), 1: (1, {'@': 208}), 6: (1, {'@': 208}), 7: (1, {'@': 208}), 8: (1, {'@': 208}), 9: (1, {'@': 208}), 2: (1, {'@': 208}), 3: (1, {'@': 208}), 4: (1, {'@': 208}), 10: (1, {'@': 208})}, 325: {14: (0, 416)}, 326: {91: (0, 258), 0: (1, {'@': 175}), 1: (1, {'@': 175}), 2: (1, {'@': 175}), 3: (1, {'@': 175}), 10: (1, {'@': 175}), 8: (1, {'@': 175})}, 327: {65: (1, {'@': 209}), 60: (1, {'@': 209}), 63: (1, {'@': 209}), 11: (1, {'@': 209}), 61: (1, {'@': 209}), 59: (1, {'@': 209}), 66: (1, {'@': 209}), 62: (1, {'@': 209}), 64: (1, {'@': 209}), 67: (1, {'@': 209}), 68: (1, {'@': 209}), 71: (1, {'@': 209}), 77: (1, {'@': 209}), 70: (1, {'@': 209})}, 328: {65: (1, {'@': 67}), 60: (1, {'@': 67}), 63: (1, {'@': 67}), 61: (1, {'@': 67}), 59: (1, {'@': 67}), 66: (1, {'@': 67}), 62: (1, {'@': 67}), 64: (1, {'@': 67}), 68: (1, {'@': 67}), 67: (1, {'@': 67}), 71: (1, {'@': 67}), 70: (1, {'@': 67}), 11: (1, {'@': 67}), 77: (1, {'@': 67})}, 329: {104: (0, 312), 71: (0, 313), 68: (0, 330)}, 330: {11: (0, 189)}, 331: {63: (1, {'@': 210}), 66: (1, {'@': 210}), 14: (1, {'@': 210}), 76: (1, {'@': 210}), 65: (1, {'@': 210}), 60: (1, {'@': 210}), 61: (1, {'@': 210}), 59: (1, {'@': 210}), 62: (1, {'@': 210}), 75: (1, {'@': 210}), 64: (1, {'@': 210}), 4: (1, {'@': 210}), 68: (1, {'@': 210}), 67: (1, {'@': 210}), 78: (1, {'@': 210}), 70: (1, {'@': 210}), 11: (1, {'@': 210}), 77: (1, {'@': 210}), 71: (1, {'@': 210})}, 332: {3: (0, 158)}, 333: {3: (0, 144)}, 334: {65: (1, {'@': 134}), 60: (1, {'@': 134}), 63: (1, {'@': 134}), 11: (1, {'@': 134}), 61: (1, {'@': 134}), 59: (1, {'@': 134}), 66: (1, {'@': 134}), 62: (1, {'@': 134}), 64: (1, {'@': 134}), 67: (1, {'@': 134}), 68: (1, {'@': 134}), 71: (1, {'@': 134}), 70: (1, {'@': 134}), 77: (1, {'@': 134})}, 335: {65: (1, {'@': 211}), 60: (1, {'@': 211}), 63: (1, {'@': 211}), 11: (1, {'@': 211}), 61: (1, {'@': 211}), 59: (1, {'@': 211}), 66: (1, {'@': 211}), 62: (1, {'@': 211}), 64: (1, {'@': 211}), 67: (1, {'@': 211}), 68: (1, {'@': 211}), 71: (1, {'@': 211}), 77: (1, {'@': 211}), 70: (1, {'@': 211})}, 336: {0: (1, {'@': 212}), 1: (1, {'@': 212}), 6: (1, {'@': 212}), 7: (1, {'@': 212}), 8: (1, {'@': 212}), 9: (1, {'@': 212}), 2: (1, {'@': 212}), 3: (1, {'@': 212}), 4: (1, {'@': 212}), 10: (1, {'@': 212})}, 337: {82: (0, 341), 84: (0, 375), 85: (0, 211), 83: (0, 419), 0: (0, 318), 86: (0, 280), 50: (0, 188), 87: (0, 417), 88: (0, 99), 89: (0, 348), 5: (0, 107), 4: (0, 314), 90: (0, 96), 1: (0, 246), 2: (0, 287), 3: (1, {'@': 92})}, 338: {0: (1, {'@': 213}), 1: (1, {'@': 213}), 6: (1, {'@': 213}), 7: (1, {'@': 213}), 8: (1, {'@': 213}), 9: (1, {'@': 213}), 2: (1, {'@': 213}), 3: (1, {'@': 213}), 4: (1, {'@': 213}), 10: (1, {'@': 213})}, 339: {11: (0, 72)}, 340: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 214}), 68: (1, {'@': 214}), 71: (1, {'@': 214}), 70: (1, {'@': 214}), 77: (1, {'@': 214})}, 341: {0: (1, {'@': 215}), 1: (1, {'@': 215}), 2: (1, {'@': 215}), 3: (1, {'@': 215}), 4: (1, {'@': 215}), 5: (1, {'@': 215}), 6: (1, {'@': 215}), 7: (1, {'@': 215}), 8: (1, {'@': 215}), 9: (1, {'@': 215}), 10: (1, {'@': 215})}, 342: {49: (1, {'@': 216}), 28: (1, {'@': 216}), 15: (1, {'@': 216}), 7: (1, {'@': 216}), 8: (1, {'@': 216}), 5: (1, {'@': 216}), 42: (1, {'@': 216}), 30: (1, {'@': 216}), 40: (1, {'@': 216}), 34: (1, {'@': 216}), 55: (1, {'@': 216}), 14: (1, {'@': 216}), 47: (1, {'@': 216}), 1: (1, {'@': 216}), 29: (1, {'@': 216}), 48: (1, {'@': 216}), 19: (1, {'@': 216}), 58: (1, {'@': 216}), 54: (1, {'@': 216}), 12: (1, {'@': 216}), 3: (1, {'@': 216}), 4: (1, {'@': 216}), 44: (1, {'@': 216})}, 343: {11: (0, 0)}, 344: {65: (1, {'@': 217}), 60: (1, {'@': 217}), 63: (1, {'@': 217}), 11: (1, {'@': 217}), 61: (1, {'@': 217}), 59: (1, {'@': 217}), 66: (1, {'@': 217}), 62: (1, {'@': 217}), 64: (1, {'@': 217}), 67: (1, {'@': 217}), 68: (1, {'@': 217}), 71: (1, {'@': 217}), 70: (1, {'@': 217}), 77: (1, {'@': 217})}, 345: {91: (0, 95)}, 346: {49: (1, {'@': 218}), 28: (1, {'@': 218}), 15: (1, {'@': 218}), 7: (1, {'@': 218}), 8: (1, {'@': 218}), 5: (1, {'@': 218}), 42: (1, {'@': 218}), 30: (1, {'@': 218}), 40: (1, {'@': 218}), 34: (1, {'@': 218}), 55: (1, {'@': 218}), 14: (1, {'@': 218}), 47: (1, {'@': 218}), 1: (1, {'@': 218}), 29: (1, {'@': 218}), 48: (1, {'@': 218}), 19: (1, {'@': 218}), 58: (1, {'@': 218}), 54: (1, {'@': 218}), 12: (1, {'@': 218}), 3: (1, {'@': 218}), 4: (1, {'@': 218}), 44: (1, {'@': 218})}, 347: {0: (1, {'@': 219}), 1: (1, {'@': 219}), 6: (1, {'@': 219}), 7: (1, {'@': 219}), 8: (1, {'@': 219}), 9: (1, {'@': 219}), 2: (1, {'@': 219}), 3: (1, {'@': 219}), 4: (1, {'@': 219}), 10: (1, {'@': 219})}, 348: {0: (1, {'@': 220}), 1: (1, {'@': 220}), 2: (1, {'@': 220}), 3: (1, {'@': 220}), 4: (1, {'@': 220}), 5: (1, {'@': 220}), 6: (1, {'@': 220}), 7: (1, {'@': 220}), 8: (1, {'@': 220}), 9: (1, {'@': 220}), 10: (1, {'@': 220})}, 349: {65: (1, {'@': 221}), 60: (1, {'@': 221}), 63: (1, {'@': 221}), 11: (1, {'@': 221}), 61: (1, {'@': 221}), 59: (1, {'@': 221}), 66: (1, {'@': 221}), 62: (1, {'@': 221}), 64: (1, {'@': 221}), 67: (1, {'@': 221}), 68: (1, {'@': 221}), 71: (1, {'@': 221}), 70: (1, {'@': 221}), 77: (1, {'@': 221})}, 350: {49: (1, {'@': 222}), 28: (1, {'@': 222}), 15: (1, {'@': 222}), 7: (1, {'@': 222}), 8: (1, {'@': 222}), 5: (1, {'@': 222}), 42: (1, {'@': 222}), 30: (1, {'@': 222}), 40: (1, {'@': 222}), 34: (1, {'@': 222}), 55: (1, {'@': 222}), 14: (1, {'@': 222}), 47: (1, {'@': 222}), 1: (1, {'@': 222}), 29: (1, {'@': 222}), 48: (1, {'@': 222}), 19: (1, {'@': 222}), 58: (1, {'@': 222}), 54: (1, {'@': 222}), 12: (1, {'@': 222}), 3: (1, {'@': 222}), 4: (1, {'@': 222}), 44: (1, {'@': 222})}, 351: {71: (0, 116), 68: (0, 114)}, 352: {3: (0, 216)}, 353: {3: (0, 212)}, 354: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 223}), 68: (1, {'@': 223}), 71: (1, {'@': 223}), 70: (1, {'@': 223}), 77: (1, {'@': 223})}, 355: {75: (0, 203)}, 356: {0: (1, {'@': 224}), 1: (1, {'@': 224}), 6: (1, {'@': 224}), 7: (1, {'@': 224}), 8: (1, {'@': 224}), 9: (1, {'@': 224}), 2: (1, {'@': 224}), 3: (1, {'@': 224}), 4: (1, {'@': 224}), 10: (1, {'@': 224})}, 357: {0: (1, {'@': 225}), 1: (1, {'@': 225}), 6: (1, {'@': 225}), 7: (1, {'@': 225}), 8: (1, {'@': 225}), 9: (1, {'@': 225}), 2: (1, {'@': 225}), 3: (1, {'@': 225}), 4: (1, {'@': 225}), 10: (1, {'@': 225})}, 358: {68: (0, 422), 3: (0, 398), 112: (0, 397)}, 359: {91: (0, 98)}, 360: {65: (1, {'@': 226}), 60: (1, {'@': 226}), 63: (1, {'@': 226}), 11: (1, {'@': 226}), 61: (1, {'@': 226}), 59: (1, {'@': 226}), 66: (1, {'@': 226}), 62: (1, {'@': 226}), 64: (1, {'@': 226}), 67: (1, {'@': 226}), 68: (1, {'@': 226}), 71: (1, {'@': 226}), 70: (1, {'@': 226}), 77: (1, {'@': 226})}, 361: {14: (0, 16), 4: (0, 170)}, 362: {14: (0, 401)}, 363: {11: (0, 67)}, 364: {0: (1, {'@': 227}), 1: (1, {'@': 227}), 8: (1, {'@': 227}), 5: (1, {'@': 227}), 2: (1, {'@': 227}), 3: (1, {'@': 227}), 4: (1, {'@': 227})}, 365: {49: (1, {'@': 228}), 28: (1, {'@': 228}), 15: (1, {'@': 228}), 7: (1, {'@': 228}), 8: (1, {'@': 228}), 5: (1, {'@': 228}), 42: (1, {'@': 228}), 30: (1, {'@': 228}), 40: (1, {'@': 228}), 34: (1, {'@': 228}), 55: (1, {'@': 228}), 14: (1, {'@': 228}), 47: (1, {'@': 228}), 1: (1, {'@': 228}), 29: (1, {'@': 228}), 48: (1, {'@': 228}), 19: (1, {'@': 228}), 58: (1, {'@': 228}), 54: (1, {'@': 228}), 12: (1, {'@': 228}), 3: (1, {'@': 228}), 4: (1, {'@': 228}), 44: (1, {'@': 228}), 0: (1, {'@': 228}), 2: (1, {'@': 228}), 9: (1, {'@': 228}), 6: (1, {'@': 228}), 10: (1, {'@': 228})}, 366: {0: (1, {'@': 229}), 1: (1, {'@': 229}), 8: (1, {'@': 229}), 5: (1, {'@': 229}), 2: (1, {'@': 229}), 3: (1, {'@': 229}), 4: (1, {'@': 229})}, 367: {65: (1, {'@': 230}), 60: (1, {'@': 230}), 63: (1, {'@': 230}), 11: (1, {'@': 230}), 61: (1, {'@': 230}), 59: (1, {'@': 230}), 66: (1, {'@': 230}), 62: (1, {'@': 230}), 64: (1, {'@': 230}), 67: (1, {'@': 230}), 68: (1, {'@': 230}), 71: (1, {'@': 230}), 78: (1, {'@': 230}), 77: (1, {'@': 230}), 70: (1, {'@': 230})}, 368: {49: (1, {'@': 231}), 28: (1, {'@': 231}), 15: (1, {'@': 231}), 7: (1, {'@': 231}), 8: (1, {'@': 231}), 5: (1, {'@': 231}), 42: (1, {'@': 231}), 30: (1, {'@': 231}), 40: (1, {'@': 231}), 34: (1, {'@': 231}), 55: (1, {'@': 231}), 14: (1, {'@': 231}), 47: (1, {'@': 231}), 1: (1, {'@': 231}), 29: (1, {'@': 231}), 48: (1, {'@': 231}), 19: (1, {'@': 231}), 58: (1, {'@': 231}), 54: (1, {'@': 231}), 12: (1, {'@': 231}), 3: (1, {'@': 231}), 4: (1, {'@': 231}), 44: (1, {'@': 231})}, 369: {14: (0, 16)}, 370: {49: (1, {'@': 232}), 28: (1, {'@': 232}), 15: (1, {'@': 232}), 7: (1, {'@': 232}), 8: (1, {'@': 232}), 5: (1, {'@': 232}), 42: (1, {'@': 232}), 30: (1, {'@': 232}), 40: (1, {'@': 232}), 34: (1, {'@': 232}), 55: (1, {'@': 232}), 14: (1, {'@': 232}), 47: (1, {'@': 232}), 1: (1, {'@': 232}), 29: (1, {'@': 232}), 48: (1, {'@': 232}), 19: (1, {'@': 232}), 58: (1, {'@': 232}), 54: (1, {'@': 232}), 12: (1, {'@': 232}), 3: (1, {'@': 232}), 4: (1, {'@': 232}), 44: (1, {'@': 232})}, 371: {76: (0, 353), 14: (0, 406), 92: (0, 36), 65: (1, {'@': 95}), 63: (1, {'@': 95}), 60: (1, {'@': 95}), 11: (1, {'@': 95}), 61: (1, {'@': 95}), 59: (1, {'@': 95}), 66: (1, {'@': 95}), 62: (1, {'@': 95}), 75: (1, {'@': 95}), 64: (1, {'@': 95}), 4: (1, {'@': 95}), 67: (1, {'@': 95}), 68: (1, {'@': 95}), 71: (1, {'@': 95}), 70: (1, {'@': 95}), 77: (1, {'@': 95})}, 372: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 303), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 373: {0: (0, 332), 3: (0, 295), 8: (0, 333), 46: (0, 289)}, 374: {75: (0, 372), 65: (1, {'@': 233}), 60: (1, {'@': 233}), 63: (1, {'@': 233}), 11: (1, {'@': 233}), 61: (1, {'@': 233}), 59: (1, {'@': 233}), 66: (1, {'@': 233}), 62: (1, {'@': 233}), 64: (1, {'@': 233}), 67: (1, {'@': 233}), 68: (1, {'@': 233}), 71: (1, {'@': 233}), 70: (1, {'@': 233}), 77: (1, {'@': 233})}, 375: {0: (0, 332), 3: (0, 399)}, 376: {14: (0, 265)}, 377: {49: (1, {'@': 234}), 28: (1, {'@': 234}), 15: (1, {'@': 234}), 7: (1, {'@': 234}), 8: (1, {'@': 234}), 5: (1, {'@': 234}), 42: (1, {'@': 234}), 30: (1, {'@': 234}), 40: (1, {'@': 234}), 34: (1, {'@': 234}), 55: (1, {'@': 234}), 14: (1, {'@': 234}), 47: (1, {'@': 234}), 1: (1, {'@': 234}), 29: (1, {'@': 234}), 48: (1, {'@': 234}), 19: (1, {'@': 234}), 58: (1, {'@': 234}), 54: (1, {'@': 234}), 12: (1, {'@': 234}), 3: (1, {'@': 234}), 4: (1, {'@': 234}), 44: (1, {'@': 234})}, 378: {91: (0, 74), 113: (0, 77), 71: (0, 78)}, 379: {91: (0, 266)}, 380: {0: (1, {'@': 235}), 1: (1, {'@': 235}), 8: (1, {'@': 235}), 5: (1, {'@': 235}), 2: (1, {'@': 235}), 3: (1, {'@': 235}), 4: (1, {'@': 235})}, 381: {65: (1, {'@': 236}), 60: (1, {'@': 236}), 63: (1, {'@': 236}), 11: (1, {'@': 236}), 61: (1, {'@': 236}), 59: (1, {'@': 236}), 66: (1, {'@': 236}), 62: (1, {'@': 236}), 64: (1, {'@': 236}), 67: (1, {'@': 236}), 68: (1, {'@': 236}), 71: (1, {'@': 236}), 70: (1, {'@': 236}), 77: (1, {'@': 236})}, 382: {49: (1, {'@': 237}), 28: (1, {'@': 237}), 15: (1, {'@': 237}), 7: (1, {'@': 237}), 8: (1, {'@': 237}), 5: (1, {'@': 237}), 42: (1, {'@': 237}), 30: (1, {'@': 237}), 40: (1, {'@': 237}), 34: (1, {'@': 237}), 55: (1, {'@': 237}), 14: (1, {'@': 237}), 47: (1, {'@': 237}), 1: (1, {'@': 237}), 29: (1, {'@': 237}), 48: (1, {'@': 237}), 19: (1, {'@': 237}), 58: (1, {'@': 237}), 54: (1, {'@': 237}), 12: (1, {'@': 237}), 3: (1, {'@': 237}), 4: (1, {'@': 237}), 44: (1, {'@': 237})}, 383: {49: (1, {'@': 238}), 28: (1, {'@': 238}), 15: (1, {'@': 238}), 7: (1, {'@': 238}), 8: (1, {'@': 238}), 5: (1, {'@': 238}), 42: (1, {'@': 238}), 30: (1, {'@': 238}), 40: (1, {'@': 238}), 34: (1, {'@': 238}), 55: (1, {'@': 238}), 14: (1, {'@': 238}), 47: (1, {'@': 238}), 1: (1, {'@': 238}), 29: (1, {'@': 238}), 48: (1, {'@': 238}), 19: (1, {'@': 238}), 58: (1, {'@': 238}), 54: (1, {'@': 238}), 12: (1, {'@': 238}), 3: (1, {'@': 238}), 4: (1, {'@': 238}), 44: (1, {'@': 238})}, 384: {0: (1, {'@': 239}), 1: (1, {'@': 239}), 8: (1, {'@': 239}), 5: (1, {'@': 239}), 2: (1, {'@': 239}), 3: (1, {'@': 239}), 4: (1, {'@': 239})}, 385: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 396), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 386: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 409), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 387: {49: (1, {'@': 240}), 28: (1, {'@': 240}), 63: (1, {'@': 240}), 15: (1, {'@': 240}), 7: (1, {'@': 240}), 8: (1, {'@': 240}), 5: (1, {'@': 240}), 66: (1, {'@': 240}), 42: (1, {'@': 240}), 30: (1, {'@': 240}), 40: (1, {'@': 240}), 34: (1, {'@': 240}), 55: (1, {'@': 240}), 14: (1, {'@': 240}), 47: (1, {'@': 240}), 65: (1, {'@': 240}), 1: (1, {'@': 240}), 60: (1, {'@': 240}), 29: (1, {'@': 240}), 48: (1, {'@': 240}), 11: (1, {'@': 240}), 19: (1, {'@': 240}), 61: (1, {'@': 240}), 59: (1, {'@': 240}), 58: (1, {'@': 240}), 54: (1, {'@': 240}), 12: (1, {'@': 240}), 62: (1, {'@': 240}), 64: (1, {'@': 240}), 3: (1, {'@': 240}), 4: (1, {'@': 240}), 67: (1, {'@': 240}), 44: (1, {'@': 240}), 68: (1, {'@': 240}), 71: (1, {'@': 240}), 77: (1, {'@': 240}), 70: (1, {'@': 240}), 78: (1, {'@': 240})}, 388: {12: (0, 367), 13: (0, 127), 3: (0, 371), 14: (0, 408), 15: (0, 173), 16: (0, 22), 17: (0, 381), 18: (0, 415), 19: (0, 393), 20: (0, 288), 21: (0, 106), 22: (0, 112), 23: (0, 103), 24: (0, 360), 25: (0, 100), 26: (0, 81), 27: (0, 421), 28: (0, 75), 29: (0, 69), 30: (0, 410), 31: (0, 413), 7: (0, 277), 32: (0, 389), 33: (0, 64), 34: (0, 80), 35: (0, 374), 36: (0, 15), 37: (0, 349), 38: (0, 316), 39: (0, 370), 8: (0, 333), 40: (0, 379), 41: (0, 392), 42: (0, 362), 43: (0, 411), 44: (0, 363), 45: (0, 231), 46: (0, 414), 4: (0, 314), 47: (0, 407), 48: (0, 263), 1: (0, 359), 49: (0, 376), 50: (0, 377), 51: (0, 383), 52: (0, 323), 53: (0, 382), 54: (0, 311), 55: (0, 403), 56: (0, 117), 57: (0, 342), 58: (0, 344), 5: (0, 26)}, 389: {63: (0, 47), 4: (0, 49), 59: (0, 43), 65: (0, 34), 75: (0, 203), 60: (0, 90), 11: (1, {'@': 241}), 61: (1, {'@': 241}), 66: (1, {'@': 241}), 62: (1, {'@': 241}), 64: (1, {'@': 241}), 67: (1, {'@': 241}), 68: (1, {'@': 241}), 71: (1, {'@': 241}), 70: (1, {'@': 241}), 77: (1, {'@': 241})}, 390: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120), 11: (1, {'@': 242}), 68: (1, {'@': 242}), 71: (1, {'@': 242}), 70: (1, {'@': 242}), 77: (1, {'@': 242})}, 391: {3: (0, 13)}, 392: {65: (1, {'@': 243}), 60: (1, {'@': 243}), 63: (1, {'@': 243}), 11: (1, {'@': 243}), 61: (1, {'@': 243}), 59: (1, {'@': 243}), 66: (1, {'@': 243}), 62: (1, {'@': 243}), 64: (1, {'@': 243}), 67: (1, {'@': 243}), 68: (1, {'@': 243}), 71: (1, {'@': 243}), 70: (1, {'@': 243}), 77: (1, {'@': 243})}, 393: {65: (1, {'@': 244}), 60: (1, {'@': 244}), 63: (1, {'@': 244}), 11: (1, {'@': 244}), 61: (1, {'@': 244}), 59: (1, {'@': 244}), 66: (1, {'@': 244}), 62: (1, {'@': 244}), 64: (1, {'@': 244}), 67: (1, {'@': 244}), 68: (1, {'@': 244}), 71: (1, {'@': 244}), 70: (1, {'@': 244}), 77: (1, {'@': 244})}, 394: {3: (0, 140)}, 395: {0: (1, {'@': 245}), 1: (1, {'@': 245}), 6: (1, {'@': 245}), 7: (1, {'@': 245}), 8: (1, {'@': 245}), 9: (1, {'@': 245}), 2: (1, {'@': 245}), 3: (1, {'@': 245}), 4: (1, {'@': 245}), 10: (1, {'@': 245})}, 396: {59: (0, 70), 60: (0, 68), 61: (0, 73), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 77: (0, 278), 67: (0, 120)}, 397: {3: (0, 394)}, 398: {3: (0, 87)}, 399: {3: (0, 283)}, 400: {49: (1, {'@': 246}), 28: (1, {'@': 246}), 15: (1, {'@': 246}), 7: (1, {'@': 246}), 8: (1, {'@': 246}), 5: (1, {'@': 246}), 42: (1, {'@': 246}), 30: (1, {'@': 246}), 40: (1, {'@': 246}), 34: (1, {'@': 246}), 55: (1, {'@': 246}), 14: (1, {'@': 246}), 47: (1, {'@': 246}), 1: (1, {'@': 246}), 29: (1, {'@': 246}), 48: (1, {'@': 246}), 19: (1, {'@': 246}), 58: (1, {'@': 246}), 54: (1, {'@': 246}), 12: (1, {'@': 246}), 3: (1, {'@': 246}), 4: (1, {'@': 246}), 44: (1, {'@': 246})}, 401: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 12), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 402: {0: (1, {'@': 247}), 1: (1, {'@': 247}), 2: (1, {'@': 247}), 3: (1, {'@': 247}), 4: (1, {'@': 247}), 5: (1, {'@': 247}), 6: (1, {'@': 247}), 7: (1, {'@': 247}), 8: (1, {'@': 247}), 9: (1, {'@': 247}), 10: (1, {'@': 247})}, 403: {11: (0, 368)}, 404: {3: (0, 19)}, 405: {3: (0, 192), 82: (0, 341), 85: (0, 211), 84: (0, 373), 0: (0, 318), 86: (0, 280), 50: (0, 188), 87: (0, 44), 89: (0, 348), 4: (0, 314), 32: (0, 355), 5: (0, 11), 1: (0, 246), 97: (0, 10), 24: (0, 307), 99: (0, 25), 88: (0, 23), 2: (0, 287), 8: (1, {'@': 92})}, 406: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 32), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 69: (0, 5), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328), 68: (1, {'@': 58})}, 407: {3: (0, 361)}, 408: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 85), 32: (0, 389), 14: (0, 408), 17: (0, 381), 18: (0, 415), 22: (0, 65), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 409: {59: (0, 70), 60: (0, 68), 61: (0, 73), 68: (0, 261), 62: (0, 63), 63: (0, 58), 64: (0, 71), 65: (0, 124), 66: (0, 126), 67: (0, 120)}, 410: {65: (1, {'@': 248}), 60: (1, {'@': 248}), 63: (1, {'@': 248}), 11: (1, {'@': 248}), 61: (1, {'@': 248}), 59: (1, {'@': 248}), 66: (1, {'@': 248}), 62: (1, {'@': 248}), 64: (1, {'@': 248}), 67: (1, {'@': 248}), 68: (1, {'@': 248}), 71: (1, {'@': 248}), 70: (1, {'@': 248}), 77: (1, {'@': 248})}, 411: {49: (1, {'@': 249}), 28: (1, {'@': 249}), 15: (1, {'@': 249}), 7: (1, {'@': 249}), 8: (1, {'@': 249}), 5: (1, {'@': 249}), 42: (1, {'@': 249}), 30: (1, {'@': 249}), 40: (1, {'@': 249}), 34: (1, {'@': 249}), 55: (1, {'@': 249}), 14: (1, {'@': 249}), 47: (1, {'@': 249}), 1: (1, {'@': 249}), 29: (1, {'@': 249}), 48: (1, {'@': 249}), 19: (1, {'@': 249}), 58: (1, {'@': 249}), 54: (1, {'@': 249}), 12: (1, {'@': 249}), 3: (1, {'@': 249}), 4: (1, {'@': 249}), 44: (1, {'@': 249})}, 412: {82: (0, 341), 84: (0, 375), 85: (0, 211), 90: (0, 86), 0: (0, 318), 86: (0, 280), 50: (0, 188), 89: (0, 348), 87: (0, 56), 4: (0, 314), 88: (0, 215), 5: (0, 121), 1: (0, 246), 2: (0, 287), 3: (1, {'@': 92})}, 413: {65: (1, {'@': 250}), 60: (1, {'@': 250}), 63: (1, {'@': 250}), 11: (1, {'@': 250}), 61: (1, {'@': 250}), 59: (1, {'@': 250}), 66: (1, {'@': 250}), 62: (1, {'@': 250}), 64: (1, {'@': 250}), 67: (1, {'@': 250}), 68: (1, {'@': 250}), 71: (1, {'@': 250}), 70: (1, {'@': 250}), 77: (1, {'@': 250})}, 414: {11: (0, 108)}, 415: {65: (1, {'@': 251}), 60: (1, {'@': 251}), 63: (1, {'@': 251}), 11: (1, {'@': 251}), 61: (1, {'@': 251}), 59: (1, {'@': 251}), 66: (1, {'@': 251}), 62: (1, {'@': 251}), 64: (1, {'@': 251}), 67: (1, {'@': 251}), 68: (1, {'@': 251}), 71: (1, {'@': 251}), 70: (1, {'@': 251}), 77: (1, {'@': 251})}, 416: {3: (0, 51), 68: (0, 62), 94: (0, 59)}, 417: {0: (1, {'@': 252}), 1: (1, {'@': 252}), 5: (1, {'@': 252}), 2: (1, {'@': 252}), 3: (1, {'@': 252}), 4: (1, {'@': 252})}, 418: {41: (0, 392), 13: (0, 127), 12: (0, 367), 3: (0, 371), 32: (0, 389), 14: (0, 408), 22: (0, 18), 17: (0, 381), 18: (0, 415), 19: (0, 393), 35: (0, 374), 45: (0, 231), 24: (0, 360), 29: (0, 385), 27: (0, 421), 47: (0, 407), 48: (0, 263), 30: (0, 410), 31: (0, 413), 52: (0, 323), 37: (0, 349), 54: (0, 311), 38: (0, 316), 58: (0, 344), 16: (0, 328)}, 419: {82: (0, 341), 84: (0, 375), 85: (0, 211), 90: (0, 86), 0: (0, 318), 86: (0, 280), 50: (0, 188), 89: (0, 348), 87: (0, 56), 4: (0, 314), 88: (0, 215), 1: (0, 246), 5: (0, 214), 2: (0, 287), 3: (1, {'@': 92})}, 420: {76: (0, 172), 14: (0, 6)}, 421: {65: (1, {'@': 253}), 60: (1, {'@': 253}), 63: (1, {'@': 253}), 11: (1, {'@': 253}), 61: (1, {'@': 253}), 59: (1, {'@': 253}), 66: (1, {'@': 253}), 62: (1, {'@': 253}), 64: (1, {'@': 253}), 67: (1, {'@': 253}), 68: (1, {'@': 253}), 71: (1, {'@': 253}), 70: (1, {'@': 253}), 77: (1, {'@': 253})}, 422: {91: (0, 79)}}, 'start_states': {'start': 102}, 'end_states': {'start': 306}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}], 'ignore': ['WS', 'COMMENT', 'ML_COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 174}, {'@': 100}, {'@': 249}, {'@': 232}, {'@': 237}, {'@': 88}, {'@': 216}, {'@': 238}, {'@': 191}, {'@': 68}, {'@': 218}, {'@': 104}, {'@': 184}, {'@': 102}, {'@': 108}, {'@': 99}, {'@': 234}, {'@': 162}, {'@': 169}, {'@': 115}, {'@': 173}, {'@': 148}, {'@': 137}, {'@': 120}, {'@': 60}, {'@': 143}, {'@': 133}, {'@': 135}, {'@': 150}, {'@': 112}, {'@': 71}, {'@': 159}, {'@': 146}, {'@': 121}, {'@': 179}, {'@': 56}, {'@': 76}, {'@': 117}, {'@': 178}, {'@': 246}, {'@': 65}, {'@': 231}, {'@': 90}, {'@': 222}, {'@': 85}, {'@': 107}, {'@': 155}, {'@': 144}, {'@': 97}, {'@': 242}, {'@': 124}, {'@': 136}, {'@': 138}, {'@': 126}, {'@': 147}, {'@': 139}, {'@': 182}, {'@': 224}, {'@': 110}, {'@': 208}, {'@': 156}, {'@': 103}, {'@': 57}, {'@': 188}, {'@': 240}, {'@': 113}, {'@': 167}, {'@': 166}, {'@': 128}, {'@': 106}, {'@': 75}, {'@': 58}, {'@': 87}, {'@': 127}, {'@': 183}, {'@': 82}, {'@': 94}, {'@': 72}, {'@': 215}, {'@': 220}, {'@': 79}, {'@': 74}, {'@': 125}, {'@': 131}, {'@': 59}, {'@': 141}, {'@': 80}, {'@': 55}, {'@': 170}, {'@': 176}, {'@': 164}, {'@': 197}, {'@': 91}, {'@': 247}, {'@': 153}, {'@': 92}, {'@': 228}, {'@': 119}, {'@': 177}, {'@': 116}, {'@': 64}, {'@': 62}, {'@': 245}, {'@': 181}, {'@': 204}, {'@': 250}, {'@': 233}, {'@': 198}, {'@': 211}, {'@': 209}, {'@': 142}, {'@': 132}, {'@': 243}, {'@': 221}, {'@': 67}, {'@': 253}, {'@': 223}, {'@': 86}, {'@': 192}, {'@': 83}, {'@': 214}, {'@': 248}, {'@': 217}, {'@': 202}, {'@': 244}, {'@': 236}, {'@': 241}, {'@': 226}, {'@': 207}, {'@': 251}, {'@': 134}, {'@': 151}, {'@': 78}, {'@': 95}, {'@': 96}, {'@': 93}, {'@': 89}, {'@': 200}, {'@': 230}, {'@': 73}, {'@': 114}, {'@': 225}, {'@': 213}, {'@': 219}, {'@': 186}, {'@': 196}, {'@': 122}, {'@': 180}, {'@': 149}, {'@': 212}, {'@': 195}, {'@': 206}, {'@': 203}, {'@': 194}, {'@': 205}, {'@': 189}, {'@': 201}, {'@': 160}, {'@': 118}, {'@': 101}, {'@': 163}, {'@': 168}, {'@': 129}, {'@': 171}, {'@': 165}, {'@': 105}, {'@': 109}, {'@': 252}, {'@': 98}, {'@': 172}, {'@': 84}, {'@': 157}, {'@': 193}, {'@': 154}, {'@': 210}, {'@': 111}, {'@': 199}, {'@': 77}, {'@': 130}, {'@': 145}, {'@': 152}, {'@': 158}, {'@': 66}, {'@': 190}, {'@': 175}, {'@': 185}, {'@': 187}, {'@': 140}, {'@': 123}, {'@': 227}, {'@': 229}, {'@': 235}, {'@': 239}, {'@': 81}, {'@': 69}, {'@': 61}, {'@': 70}, {'@': 63}, {'@': 161}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'LIKELY', 'pattern': {'value': 'likely', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'UNLIKELY', 'pattern': {'value': 'unlikely', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'ACCESS_MODIFIER', 'pattern': {'value': '(?:(?:private|public)|internal)', 'flags': [], '_width': [6, 8], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 3: {'name': 'UNSAFE', 'pattern': {'value': 'unsafe', 'flags': [], '__type__': 'PatternStr'}, 'priority': 2, '__type__': 'TerminalDef'}, 4: {'name': 'DIV', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': -4, '__type__': 'TerminalDef'}, 5: {'name': 'MUL', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': -4, '__type__': 'TerminalDef'}, 6: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': -5, '__type__': 'TerminalDef'}, 7: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': -5, '__type__': 'TerminalDef'}, 8: {'name': 'BIGGER', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': -6, '__type__': 'TerminalDef'}, 9: {'name': 'SMALLER', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': -6, '__type__': 'TerminalDef'}, 10: {'name': 'BIGGER_EQUAL', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': -7, '__type__': 'TerminalDef'}, 11: {'name': 'SMALLER_EQUAL', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': -7, '__type__': 'TerminalDef'}, 12: {'name': 'EQUAL', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': -7, '__type__': 'TerminalDef'}, 13: {'name': 'ASSIGN', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': -8, '__type__': 'TerminalDef'}, 14: {'name': 'NUMBER', 'pattern': {'value': '(?:(?:\\+|\\-))?(?:(?:(?:(?:0x(?:(?:[a-f]|[A-F])|[0-9])(?:(?:(?:(?:[a-f]|[A-F])|[0-9])|_))*|0b(?:(?:(?:0|1)|_))+)|(?:(?:(?:(?:[0-9](?:(?:[0-9]|_))*)+\\.(?:[0-9](?:(?:[0-9]|_))*)+|(?:[0-9](?:(?:[0-9]|_))*)+\\.)|\\.(?:[0-9](?:(?:[0-9]|_))*)+)(?:(?:(?:f|d)|h))?|[0-9](?:(?:[0-9]|_))*)e(?:(?:\\-|\\+))?[0-9](?:(?:[0-9]|_))*)|(?:(?:(?:[0-9](?:(?:[0-9]|_))*)+\\.(?:[0-9](?:(?:[0-9]|_))*)+|(?:[0-9](?:(?:[0-9]|_))*)+\\.)|\\.(?:[0-9](?:(?:[0-9]|_))*)+)(?:(?:(?:f|d)|h))?)|[0-9](?:(?:[0-9]|_))*)(?:(?:(?:(?:(?:(?:(?:(?:(?:(?:uL|U)|Ul)|UL)|ul)|l)|u)|L)|b)|B))?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': -3, '__type__': 'TerminalDef'}, 15: {'name': 'PARAMS', 'pattern': {'value': 'params', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'THIS', 'pattern': {'value': 'this', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'PREPRO_FLAG', 'pattern': {'value': '#', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'IDENTIFIER', 'pattern': {'value': '(?:(?:(_|[a-zA-Z])(_|[a-zA-Z0-9])*\\[\\]|@"[^"]+")|(?!(^(var|return|use|external|params|public|internal|private|sizeof)$))#?(_|[a-zA-Z])(_|[a-zA-Z0-9])*)', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': -10, '__type__': 'TerminalDef'}, 19: {'name': 'COMMENT', 'pattern': {'value': '//[^\n]*\\\n', 'flags': [], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'ML_COMMENT', 'pattern': {'value': '/\\*[^*]*\\*/', 'flags': [], '_width': [4, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'SWITCH', 'pattern': {'value': 'switch', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'DEFAULT', 'pattern': {'value': 'default', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'LOOP', 'pattern': {'value': 'loop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'CONTINUE', 'pattern': {'value': 'continue', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'BREAK', 'pattern': {'value': 'break', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'QMARK', 'pattern': {'value': '?', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'VAR', 'pattern': {'value': 'var', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'STRUCT', 'pattern': {'value': 'struct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'NEW', 'pattern': {'value': 'new', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'EXTERNAL', 'pattern': {'value': 'external', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'SIZEOF', 'pattern': {'value': 'sizeof', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'NULL', 'pattern': {'value': 'null', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'USE', 'pattern': {'value': 'use', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 56: {'origin': {'name': 'for_loop', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'variable_decl', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 57: {'origin': {'name': 'struct_property_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ASSIGN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 58: {'origin': {'name': 'function_args', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 59: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 60: {'origin': {'name': 'conditional_else_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 61: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, {'name': 'global_variable_decl', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 62: {'origin': {'name': 'unsafe_top_level_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNSAFE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 63: {'origin': {'name': '__using_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 64: {'origin': {'name': 'unsafe_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNSAFE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 65: {'origin': {'name': 'loop_loop', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LOOP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 66: {'origin': {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_call', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_call', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, {'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, {'name': 'global_variable_assignment', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'switch_case', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'using', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'USE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__using_star_13', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'extension_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'THIS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'function_args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'for_loop', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'variable_decl', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__nested_function_call_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'extension_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'THIS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, {'name': 'attributed_func_decl', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'SMALLER_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, {'name': 'attributed_func_decl', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'return_rule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'BIGGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_loop', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'math', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'MUL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'break_rule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BREAK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'modifier', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'math', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': [False, False, False, False, True, False, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'math', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'variable_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return_rule', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'statement', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'continue_rule', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'struct_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'variable_decl', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': '__struct_decl_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'function_args', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': '__function_args_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'shorthand_if', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'QMARK', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'break_rule', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': '__struct_decl_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__struct_decl_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'struct_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': '__function_args_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'switch_case', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'constructor_call', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'using', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'USE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'conditional_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_else_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'unsafe_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNSAFE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'while_loop', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': '__conditional_block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__conditional_block_star_1', '__type__': 'NonTerminal'}, {'name': 'conditional_elif_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'attributed_func_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__attributed_func_decl_plus_11', '__type__': 'NonTerminal'}, {'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'conditional_elif_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'default_case', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFAULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': '__attributed_func_decl_plus_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__attributed_func_decl_plus_11', '__type__': 'NonTerminal'}, {'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'variable_arithmetic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'extension_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'THIS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'variable_arithmetic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'nested_function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__nested_function_call_plus_6', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'function_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'default_case', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__function_decl_star_8', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'extension_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'THIS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'array_access', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'UNLIKELY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'variable_arithmetic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'conditional_body', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'variable_arithmetic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'variable_arithmetic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'DIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': '__attributed_func_decl_plus_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'array_access', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'number', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LIKELY', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': 'global_variable_assignment', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'variable_assignment', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'default_case', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFAULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'variable_arithmetic', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'MUL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'conditional_body', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attributed_compiler_directive', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'switch_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SWITCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 19, 'alias': 'cast', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'modifier', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__modifier_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': '__nested_function_call_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'global_variable_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'variable_decl', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'struct_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, {'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'switch_case', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': '__conditional_block_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conditional_elif_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': '__using_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__using_star_13', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'conditional_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_block_star_1', '__type__': 'NonTerminal'}, {'name': 'conditional_else_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'statement', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, {'name': 'default_case', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'constructor_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'function_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'nested_function_call', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'switch_case', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': 'conditional_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_block_star_1', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__switch_block_plus_3', '__type__': 'NonTerminal'}, {'name': 'switch_case', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'struct_property_declaration', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'conditional_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'likely_unlikely_modifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'conditional_body', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': '__modifier_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNSAFE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PARAMS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'attributed_compiler_directive', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PREPRO_FLAG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'while_loop', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'default_case', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFAULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'using', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'sizeof', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SIZEOF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'struct_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__struct_decl_star_4', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'using', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': '__modifier_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__modifier_star_10', '__type__': 'NonTerminal'}, {'name': 'ACCESS_MODIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_variable_assignment', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': '__modifier_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__modifier_star_10', '__type__': 'NonTerminal'}, {'name': 'UNSAFE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'struct_property_declaration', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'using', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': '__modifier_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ACCESS_MODIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unsafe_block', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'BIGGER_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, {'name': 'struct_property_declaration', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'attributed_func_decl', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'struct_decl', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attributed_func_decl', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__external_function_decl_star_9', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'array_assignment', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_access', '__type__': 'NonTerminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': '__function_args_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__function_args_star_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'math', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'DIV', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'attributed_compiler_directive', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'global_variable_assignment', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'array', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_assignment', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'global_variable_decl', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'variable_arithmetic', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': 'struct_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': 'array_constructor', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': '__nested_function_call_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__nested_function_call_plus_6', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': 'array_constructor', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NEW', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'number', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'unsafe_top_level_block', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'struct_decl', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'external_function_decl', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while_loop', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_variable_decl', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': 'function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'extension_function_decl', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': 'return_rule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expression', '__type__': 'NonTerminal'}, {'name': 'SMALLER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'equal', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': 'struct_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__struct_decl_star_4', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unsafe_top_level_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'variable_assignment', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attributed_func_decl', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': 'attribute', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'function_call', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_decl', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': 'number', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': 'continue_rule', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONTINUE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conditional_elif_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': 'array', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_access', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attribute', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_variable_decl', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'switch_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'loop_loop', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': '__unsafe_top_level_block_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_variable_assignment', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': 'function_call', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'function_args', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': 'variable_assignment', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': 'ASSIGN', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expression', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sizeof', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NULL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'null', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': 'unsafe_top_level_block', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'UNSAFE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': 'loop_loop', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LOOP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__conditional_body_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': 'external_function_decl', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'modifier', '__type__': 'NonTerminal'}, {'name': 'EXTERNAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IDENTIFIER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': [False, False, False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': 'string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': 'statement', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'conditional_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': 'array', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_constructor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shorthand_if', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': '__struct_decl_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'attributed_func_decl', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': 'expression', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'math', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
